version: 2.1
orbs:
  node: circleci/node@3.0.0

commands: 
  cache-install: 
    description: installs << parameters.path >>
    parameters: 
      path: 
        type: string
    steps: 
      - restore_cache: 
          name: restore cache << parameters.path >>
          keys: 
            - npm-cache-<< parameters.path >>-{{checksum "<<parameters.path>>/package.json"}}
            - npm-cache-<< parameters.path >>-
      - run: 
          command: npm install
          name: install << parameters.path >>
          working_directory: <<parameters.path>>
      - save_cache: 
          name: save cache << parameters.path >>
          paths:  
            - <<parameters.path>>/node_modules
          key: npm-cache-<< parameters.path >>-{{checksum "<<parameters.path>>/package.json"}}

executors:
  node:
    parameters:
      image:
        type: string
        default: "14.18"
    docker:
      - image: circleci/node:<< parameters.image >>
        environment:
          DB_PASSWORD: integration-tests
      - image: circleci/postgres:11.13-bullseye-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: integration-tests

dependencies: 
  cache_directories: 
    - /home/circleci/.local/bin
    - /home/circleci/.local/lib/node_modules

aliases:
  install_node_modules: &install_node_modules
    run:
      name: Install node modules
      command: yarn --frozen-lockfile
  attach_to_bootstrap: &attach_to_bootstrap
    attach_workspace:
      at: ./

jobs:
  bootstrap:
    executor: node
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "packages/*|(e2e|integration)-tests/*|.circleci/*|yarn.lock"
      - <<: *install_node_modules
      - run: yarn bootstrap --since origin/develop...HEAD --concurrency=2
        # Persist the workspace again with all packages already built
      - persist_to_workspace:
          root: ./
          paths:
            - "*"

  unit_test:
    executor: node
    steps:
      - checkout
      - run: ./scripts/assert-changed-files.sh "packages"
      - <<: *attach_to_bootstrap
      - run:
          command: node --max-old-space-size=2048 ./node_modules/.bin/jest -w 1 --changedSince=origin/develop

  install_integration_testing: 
    executor: node
    steps: 
      - checkout
      - cache-install:
          path: .
      - cache-install:
          path: packages/medusa
      - cache-install:
          path: packages/medusa-interfaces
      - cache-install:
          path: packages/babel-preset-medusa-package
      - cache-install:
          path: packages/medusa-cli
      - cache-install:
          path: packages/medusa-core-utils
      - cache-install:
          path: packages/medusa-test-utils
      - cache-install:
          path: packages/medusa-telemetry

  integration_testing:
    executor: node
    steps:
      - checkout
      - run: sudo npm i -g medusa-dev-cli
      - run:
          name: Set path to medusa repo
          command: medusa-dev --set-path-to-repo `pwd`
      
      - run:  
          name: force install
          command: medusa-dev --force-install
          working_directory: integration-tests/api
      - run:
          name: install tests
          command: yarn install
          working_directory: integration-tests/api
      - run:
          name: build tests
          command: yarn build
          working_directory: integration-tests/api
      - run:
          name: integration tests
          command: yarn test
          working_directory: integration-tests/api

      # - run:
      #     name: install base
      #     command: yarn install
      # - run:
      #     name: install medusa
      #     command: npm install
      #     working_directory: packages/medusa
      # - run:
          # name: install medusa-interfaces
          # command: npm install
          # working_directory: packages/medusa-interfaces
      # - run:
      #     name: install medusa-babel
      #     command: npm install
      #     working_directory: packages/babel-preset-medusa-package
      # - run:
      #     name: install medusa-cli
      #     command: npm install
      #     working_directory: packages/medusa-cli
      # - run:
      #     name: install medusa-core-utils
      #     command: npm install
      #     working_directory: packages/medusa-core-utils
      # - run:
      #     name: install medusa-test-utils
      #     command: npm install
      #     working_directory: packages/medusa-test-utils
      # - run:
      #     name: install medusa-telemetry
      #     command: npm install
      #     working_directory: packages/medusa-telemetry
      # - run:
      #     name: force install
      #     command: medusa-dev --force-install
      #     working_directory: integration-tests/api
      # - run:
      #     name: install tests
      #     command: yarn install
      #     working_directory: integration-tests/api

workflows:
  test_all:
    jobs:
      - install_integration_testing
      - bootstrap
      - unit_test:
          requires:
            - bootstrap
      - integration_testing:
          requires: 
            - install_integration_testing
