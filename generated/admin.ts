/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/apps": {
    /** Retrieve a list of applications. */
    get: operations["GetApps"];
    /** Generates a token for an application. */
    post: operations["PostApps"];
  };
  "/auth": {
    /** Gets the currently logged in User. */
    get: operations["GetAuth"];
    /** Logs a User in and authorizes them to manage Store settings. */
    post: operations["PostAuth"];
  };
  "/collections/{id}/products/batch": {
    /** Updates products associated with a Product Collection */
    post: operations["PostProductsToCollection"];
    /** Removes products associated with a Product Collection */
    delete: operations["DeleteProductsFromCollection"];
  };
  "/collections": {
    /** Retrieve a list of Product Collection. */
    get: operations["GetCollections"];
    /** Creates a Product Collection. */
    post: operations["PostCollections"];
  };
  "/collections/{id}": {
    /** Retrieves a Product Collection. */
    get: operations["GetCollectionsCollection"];
    /** Updates a Product Collection. */
    post: operations["PostCollectionsCollection"];
    /** Deletes a Product Collection. */
    delete: operations["DeleteCollectionsCollection"];
  };
  "/customer-groups": {
    /** Creates a CustomerGroup. */
    post: operations["PostCustomerGroups"];
  };
  "/customer-groups/{id}": {
    /** Update a CustomerGroup. */
    post: operations["PostCustomerGroupsGroup"];
    /** Deletes a CustomerGroup. */
    delete: operations["DeleteCustomerGroupsCustomerGroup"];
  };
  "/customer-group/{id}": {
    /** Retrieves a Customer Group. */
    get: operations["GetCustomerGroupsGroup"];
  };
  "/customers": {
    /** Retrieves a list of Customers. */
    get: operations["GetCustomers"];
    /** Creates a Customer. */
    post: operations["PostCustomers"];
  };
  "/customers/{id}": {
    /** Retrieves a Customer. */
    get: operations["GetCustomersCustomer"];
    /** Updates a Customer. */
    post: operations["PostCustomersCustomer"];
  };
  "/discounts/{id}/regions/{region_id}": {
    /** Adds a Region to the list of Regions that a Discount can be used in. */
    post: operations["PostDiscountsDiscountRegionsRegion"];
    /** Removes a Region from the list of Regions that a Discount can be used in. */
    delete: operations["DeleteDiscountsDiscountRegionsRegion"];
  };
  "/discounts/{id}/products/{product_id}": {
    /** Adds a Product to the list of Products that a Discount can be used for. */
    post: operations["PostDiscountsDiscountProductsProduct"];
    /** Removes a Product from the list of Products that a Discount can be used for. */
    delete: operations["DeleteDiscountsDiscountProductsProduct"];
  };
  "/discounts": {
    /** Retrieves a list of Discounts */
    get: operations["GetDiscounts"];
    /** Creates a Discount with a given set of rules that define how the Discount behaves. */
    post: operations["PostDiscounts"];
  };
  "/discounts/{id}/dynamic-codes": {
    /** Creates a unique code that can map to a parent Discount. This is useful if you want to automatically generate codes with the same behaviour. */
    post: operations["PostDiscountsDiscountDynamicCodes"];
  };
  "/discounts/{id}": {
    /** Retrieves a Discount */
    get: operations["GetDiscountsDiscount"];
    /** Updates a Discount with a given set of rules that define how the Discount behaves. */
    post: operations["PostDiscountsDiscount"];
    /** Deletes a Discount. */
    delete: operations["DeleteDiscountsDiscount"];
  };
  "/discounts/{id}/dynamic-codes/{code}": {
    /** Deletes a dynamic code from a Discount. */
    delete: operations["DeleteDiscountsDiscountDynamicCodesCode"];
  };
  "/discounts/code/{code}": {
    /** Retrieves a Discount by its discount code */
    get: operations["GetDiscountsDiscountCode"];
  };
  "/draft-orders": {
    /** Retrieves an list of Draft Orders */
    get: operations["GetDraftOrders"];
    /** Creates a Draft Order */
    post: operations["PostDraftOrders"];
  };
  "/draft-orders/{id}/line-items": {
    /** Creates a Line Item for the Draft Order */
    post: operations["PostDraftOrdersDraftOrderLineItems"];
  };
  "/draft-orders/{id}": {
    /** Retrieves a Draft Order. */
    get: operations["GetDraftOrdersDraftOrder"];
    /** Deletes a Draft Order */
    delete: operations["DeleteDraftOrdersDraftOrder"];
  };
  "/draft-orders/{id}/line-items/{line_id}": {
    /** Updates a Line Item for a Draft Order */
    post: operations["PostDraftOrdersDraftOrderLineItemsItem"];
    /** Removes a Line Item from a Draft Order. */
    delete: operations["DeleteDraftOrdersDraftOrderLineItemsItem"];
  };
  "/draft-orders/{id}/register-payment": {
    /** Registers a payment for a Draft Order. */
    post: operations["PostDraftOrdersDraftOrderRegisterPayment"];
  };
  "/admin/draft-orders/{id}": {
    /** Updates a Draft Order. */
    post: operations["PostDraftOrdersDraftOrder"];
  };
  "/gift-cards": {
    /** Retrieves a list of Gift Cards. */
    get: operations["GetGiftCards"];
    /** Creates a Gift Card that can redeemed by its unique code. The Gift Card is only valid within 1 region. */
    post: operations["PostGiftCards"];
  };
  "/gift-cards/{id}": {
    /** Retrieves a Gift Card. */
    get: operations["GetGiftCardsGiftCard"];
    /** Creates a Gift Card that can redeemed by its unique code. The Gift Card is only valid within 1 region. */
    post: operations["PostGiftCardsGiftCard"];
    /** Deletes a Gift Card */
    delete: operations["DeleteGiftCardsGiftCard"];
  };
  "/invites/accept": {
    /** Accepts an Invite and creates a corresponding user */
    post: operations["PostInvitesInviteAccept"];
  };
  "/invites": {
    /** Lists all Invites */
    get: operations["GetInvites"];
    /** Creates an Invite and triggers an 'invite' created event */
    post: operations["PostInvites"];
  };
  "/invites/{invite_id}": {
    /** Creates an Invite and triggers an 'invite' created event */
    delete: operations["DeleteInvitesInvite"];
  };
  "/invites/{invite_id}/resend": {
    /** Resends an Invite by triggering the 'invite' created event again */
    post: operations["PostInvitesInviteResend"];
  };
  "/notes": {
    /** Retrieves a list of notes */
    get: operations["GetNotes"];
    /** Creates a Note which can be associated with any resource as required. */
    post: operations["PostNotes"];
  };
  "/notes/{id}": {
    /** Retrieves a single note using its id */
    get: operations["GetNotesNote"];
    /** Updates a Note associated with some resource */
    post: operations["PostNotesNote"];
    /** Deletes a Note. */
    delete: operations["DeleteNotesNote"];
  };
  "/notifications": {
    /** Retrieves a list of Notifications. */
    get: operations["GetNotifications"];
  };
  "/notifications/{id}/resend": {
    /** Resends a previously sent notifications, with the same data but optionally to a different address */
    post: operations["PostNotificationsNotificationResend"];
  };
  "/orders/{id}/shipping-methods": {
    /** Adds a Shipping Method to an Order. If another Shipping Method exists with the same Shipping Profile, the previous Shipping Method will be replaced. */
    post: operations["PostOrdersOrderShippingMethods"];
  };
  "/orders/{id}/archive": {
    /** Archives the order with the given id. */
    post: operations["PostOrdersOrderArchive"];
  };
  "/orders/{id}/claims/{claim_id}/cancel": {
    /** Cancels a Claim */
    post: operations["PostOrdersClaimCancel"];
  };
  "/orders/{id}/claims/{claim_id}/fulfillments/{fulfillment_id}/cancel": {
    /** Registers a Fulfillment as canceled. */
    post: operations["PostOrdersClaimFulfillmentsCancel"];
  };
  "/orders/{id}/swaps/{swap_id}/fulfillments/{fulfillment_id}/cancel": {
    /** Registers a Fulfillment as canceled. */
    post: operations["PostOrdersSwapFulfillmentsCancel"];
  };
  "/orders/{id}/fulfillments/{fulfillment_id}/cancel": {
    /** Registers a Fulfillment as canceled. */
    post: operations["PostOrdersOrderFulfillmentsCancel"];
  };
  "/orders/{id}/cancel": {
    /** Registers an Order as canceled. This triggers a flow that will cancel any created Fulfillments and Payments, may fail if the Payment or Fulfillment Provider is unable to cancel the Payment/Fulfillment. */
    post: operations["PostOrdersOrderCancel"];
  };
  "/orders/{id}/swaps/{swap_id}/cancel": {
    /** Cancels a Swap */
    post: operations["PostOrdersSwapCancel"];
  };
  "/orders/{id}/capture": {
    /** Captures all the Payments associated with an Order. */
    post: operations["PostOrdersOrderCapture"];
  };
  "/orders/{id}/complete": {
    /** Completes an Order */
    post: operations["PostOrdersOrderComplete"];
  };
  "/orders/{id}/claims/{claim_id}/shipments": {
    /** Registers a Claim Fulfillment as shipped. */
    post: operations["PostOrdersOrderClaimsClaimShipments"];
  };
  "/order/{id}/claims": {
    /** Creates a Claim. */
    post: operations["PostOrdersOrderClaims"];
  };
  "/orders/{id}/fulfillments": {
    /** Creates a Fulfillment of an Order - will notify Fulfillment Providers to prepare a shipment. */
    post: operations["PostOrdersOrderFulfillments"];
  };
  "/orders": {
    /** Retrieves a list of Orders */
    get: operations["GetOrders"];
    /** Creates and order */
    post: operations["PostOrders"];
  };
  "/orders/{id}/shipment": {
    /** Registers a Fulfillment as shipped. */
    post: operations["PostOrdersOrderShipment"];
  };
  "/orders/{id}/swaps/{swap_id}/shipments": {
    /** Registers a Swap Fulfillment as shipped. */
    post: operations["PostOrdersOrderSwapsSwapShipments"];
  };
  "/order/{id}/swaps": {
    /** Creates a Swap. Swaps are used to handle Return of previously purchased goods and Fulfillment of replacements simultaneously. */
    post: operations["PostOrdersOrderSwaps"];
  };
  "/order/{id}/metadata/{key}": {
    /** Deletes a metadata key. */
    delete: operations["DeleteOrdersOrderMetadataKey"];
  };
  "/orders/{id}/claims/{claim_id}/fulfillments": {
    /** Creates a Fulfillment for a Claim. */
    post: operations["PostOrdersOrderClaimsClaimFulfillments"];
  };
  "/orders/{id}/swaps/{swap_id}/fulfillments": {
    /** Creates a Fulfillment for a Swap. */
    post: operations["PostOrdersOrderSwapsSwapFulfillments"];
  };
  "/orders/{id}": {
    /** Retrieves an Order */
    get: operations["GetOrdersOrder"];
    /** Updates and order */
    post: operations["PostOrdersOrder"];
  };
  "/orders/{id}/swaps/{swap_id}/process-payment": {
    /** When there are differences between the returned and shipped Products in a Swap, the difference must be processed. Either a Refund will be issued or a Payment will be captured. */
    post: operations["PostOrdersOrderSwapsSwapProcessPayment"];
  };
  "/orders/{id}/refunds": {
    /** Issues a Refund. */
    post: operations["PostOrdersOrderRefunds"];
  };
  "/orders/{id}/returns": {
    /** Requests a Return. If applicable a return label will be created and other plugins notified. */
    post: operations["PostOrdersOrderReturns"];
  };
  "/order/{id}/claims/{claim_id}": {
    /** Updates a Claim. */
    post: operations["PostOrdersOrderClaimsClaim"];
  };
  "/product-tags": {
    /** Retrieve a list of Product Tags. */
    get: operations["GetProductTags"];
  };
  "/product-types": {
    /** Retrieve a list of Product Types. */
    get: operations["GetProductTypes"];
  };
  "/regions/{id}/countries": {
    /** Adds a Country to the list of Countries in a Region */
    post: operations["PostRegionsRegionCountries"];
  };
  "/regions/{id}/fulfillment-providers": {
    /** Adds a Fulfillment Provider to a Region */
    post: operations["PostRegionsRegionFulfillmentProviders"];
  };
  "/regions/{id}/payment-providers": {
    /** Adds a Payment Provider to a Region */
    post: operations["PostRegionsRegionPaymentProviders"];
  };
  "/regions": {
    /** Retrieves a list of Regions. */
    get: operations["GetRegions"];
    /** Creates a Region */
    post: operations["PostRegions"];
  };
  "/regions/{id}/metadata/{key}": {
    /** Deletes a metadata key. */
    delete: operations["DeleteRegionsRegionMetadataKey"];
  };
  "/regions/{id}": {
    /** Retrieves a Region. */
    get: operations["GetRegionsRegion"];
    /** Updates a Region */
    post: operations["PostRegionsRegion"];
    /** Deletes a Region. */
    delete: operations["DeleteRegionsRegion"];
  };
  "/regions/{id}/fulfillment-options": {
    /** Gathers all the fulfillment options available to in the Region. */
    get: operations["GetRegionsRegionFulfillmentOptions"];
  };
  "/regions/{id}/countries/{country_code}": {
    /** Removes a Country from the list of Countries in a Region */
    delete: operations["PostRegionsRegionCountriesCountry"];
  };
  "/regions/{id}/fulfillment-providers/{provider_id}": {
    /** Removes a Fulfillment Provider. */
    delete: operations["PostRegionsRegionFulfillmentProvidersProvider"];
  };
  "/regions/{id}/payment-providers/{provider_id}": {
    /** Removes a Payment Provider. */
    delete: operations["PostRegionsRegionPaymentProvidersProvider"];
  };
  "/regions/{id}/metadata": {
    /** Sets the metadata of a Region */
    post: operations["PostRegionsRegionMetadata"];
  };
  "/products/{id}/options": {
    /** Adds a Product Option to a Product */
    post: operations["PostProductsProductOptions"];
  };
  "/products": {
    /** Retrieves a list of Product */
    get: operations["GetProducts"];
    /** Creates a Product */
    post: operations["PostProducts"];
  };
  "/products/{id}/variants": {
    /** Retrieves a list of the Product Variants associated with a Product. */
    get: operations["GetProductsProductVariants"];
    /** Creates a Product Variant. Each Product Variant must have a unique combination of Product Option Values. */
    post: operations["PostProductsProductVariants"];
  };
  "/products/{id}/options/{option_id}": {
    /** Updates a Product Option */
    post: operations["PostProductsProductOptionsOption"];
    /** Deletes a Product Option. Before a Product Option can be deleted all Option Values for the Product Option must be the same. You may, for example, have to delete some of your variants prior to deleting the Product Option */
    delete: operations["DeleteProductsProductOptionsOption"];
  };
  "/products/{id}": {
    /** Retrieves a Product. */
    get: operations["GetProductsProduct"];
    /** Updates a Product */
    post: operations["PostProductsProduct"];
    /** Deletes a Product and it's associated Product Variants. */
    delete: operations["DeleteProductsProduct"];
  };
  "/products/{id}/variants/{variant_id}": {
    /** Update a Product Variant. */
    post: operations["PostProductsProductVariantsVariant"];
    /** Deletes a Product Variant. */
    delete: operations["DeleteProductsProductVariantsVariant"];
  };
  "/products/types": {
    /** Retrieves a list of Product Types. */
    get: operations["GetProductsTypes"];
  };
  "/products/{id}/metadata": {
    /** Set metadata key/value pair for Product */
    post: operations["PostProductsProductMetadata"];
  };
  "/return-reasons": {
    /** Retrieves a list of Return Reasons. */
    get: operations["GetReturnReasons"];
    /** Creates a Return Reason */
    post: operations["PostReturnReasons"];
  };
  "/return-reasons/{id}": {
    /** Retrieves a Return Reason. */
    get: operations["GetReturnReasonsReason"];
    /** Updates a Return Reason */
    post: operations["PostReturnReasonsReason"];
    /** Deletes a return reason. */
    delete: operations["DeleteReturnReason"];
  };
  "/returns/{id}/cancel": {
    /** Registers a Return as canceled. */
    post: operations["PostReturnsReturnCancel"];
  };
  "/returns": {
    /** Retrieves a list of Returns */
    get: operations["GetReturns"];
  };
  "/returns/{id}/receive": {
    /** Registers a Return as received. Updates statuses on Orders and Swaps accordingly. */
    post: operations["PostReturnsReturnReceive"];
  };
  "/shipping-options": {
    /** Retrieves a list of Shipping Options. */
    get: operations["GetShippingOptions"];
    /** Creates a Shipping Option */
    post: operations["PostShippingOptions"];
  };
  "/shipping-options/{id}": {
    /** Retrieves a Shipping Option. */
    get: operations["GetShippingOptionsOption"];
    /** Updates a Shipping Option */
    post: operations["PostShippingOptionsOption"];
    /** Deletes a Shipping Option. */
    delete: operations["DeleteShippingOptionsOption"];
  };
  "/shipping-profiles": {
    /** Retrieves a list of Shipping Profile. */
    get: operations["GetShippingProfiles"];
    /** Creates a Shipping Profile */
    post: operations["PostShippingProfiles"];
  };
  "/shipping-profiles/{id}": {
    /** Retrieves a Shipping Profile. */
    get: operations["GetShippingProfilesProfile"];
    /** Updates a Shipping Profile */
    post: operations["PostShippingProfilesProfile"];
    /** Deletes a Shipping Profile. */
    delete: operations["DeleteShippingProfilesProfile"];
  };
  "/store/currencies/{code}": {
    /** Adds a Currency Code to the available currencies. */
    post: operations["PostStoreCurrenciesCode"];
    /** Removes a Currency Code from the available currencies. */
    delete: operations["DeleteStoreCurrenciesCode"];
  };
  "/store": {
    /** Retrieves the Store details */
    get: operations["GetStore"];
    /** Updates the Store details */
    post: operations["PostStore"];
  };
  "/store/payment-providers": {
    /** Retrieves the configured Payment Providers */
    get: operations["GetStorePaymentProviders"];
  };
  "/store/tax-providers": {
    /** Retrieves the configured Tax Providers */
    get: operations["GetStoreTaxProviders"];
  };
  "/swaps/{id}": {
    /** Retrieves a Swap. */
    get: operations["GetSwapsSwap"];
  };
  "/swaps": {
    /** Retrieves a list of Swaps. */
    get: operations["GetSwaps"];
  };
  "/tax-rates/:id/product-types/batch": {
    /** Associates a Tax Rate with a list of Product Types */
    post: operations["PostTaxRatesTaxRateProductTypes"];
    /** Removes a Tax Rate from a list of Product Types */
    delete: operations["DeleteTaxRatesTaxRateProductTypes"];
  };
  "/tax-rates/:id/products/batch": {
    /** Associates a Tax Rate with a list of Products */
    post: operations["PostTaxRatesTaxRateProducts"];
    /** Removes a Tax Rate from a list of Products */
    delete: operations["DeleteTaxRatesTaxRateProducts"];
  };
  "/tax-rates/:id/shipping-options/batch": {
    /** Associates a Tax Rate with a list of Product Types */
    post: operations["PostTaxRatesTaxRateShippingOptions"];
    /** Removes a Tax Rate from a list of Product Types */
    delete: operations["DeleteTaxRatesTaxRateShippingOptions"];
  };
  "/tax-rates": {
    /** Retrieves a list of TaxRates */
    get: operations["GetTaxRates"];
    /** Creates a Tax Rate */
    post: operations["PostTaxRates"];
  };
  "/tax-rates/{id}": {
    /** Deletes a Tax Rate */
    delete: operations["DeleteTaxRatesTaxRate"];
  };
  "/tax-rates/:id": {
    /** Retrieves a TaxRate */
    get: operations["GetTaxRatesTaxRate"];
    /** Updates a Tax Rate */
    post: operations["PostTaxRatesTaxRate"];
  };
  "/": {
    /** Uploads an array of files to the specific fileservice that is installed in medusa. */
    post: operations["PostUploads"];
  };
  "/variants": {
    /** Retrieves a list of Product Variants */
    get: operations["GetVariants"];
  };
  "/users": {
    /** Retrieves all users. */
    get: operations["GetUsers"];
    /** Creates a User */
    post: operations["PostUsers"];
  };
  "/users/{user_id}": {
    /** Updates a User */
    post: operations["PostUsersUser"];
    /** Deletes a User */
    delete: operations["DeleteUsersUser"];
  };
  "/users/{id}": {
    /** Retrieves a User. */
    get: operations["GetUsersUser"];
  };
  "/users/password-token": {
    /** Sets the password for a User given the correct token. */
    post: operations["PostUsersUserPassword"];
  };
}

export interface components {
  schemas: {
    /**
     * Address
     * @description An address.
     */
    address: {
      id?: string;
      customer_id?: string;
      company?: string;
      first_name?: string;
      last_name?: string;
      address_1?: string;
      address_2?: string;
      city?: string;
      country_code?: string;
      country?: components["schemas"]["country"];
    };
    /**
     * Cart
     * @description Represents a user cart
     */
    cart: {
      id?: string;
      email?: string;
      billing_address_id?: string;
      billing_address?: components["schemas"]["address"];
      shipping_address_id?: string;
      shipping_address?: components["schemas"]["address"];
      items?: components["schemas"]["line_item"][];
      region_id?: string;
      region?: components["schemas"]["region"];
      discounts?: components["schemas"]["region"][];
      gift_cards?: components["schemas"]["gift_card"][];
      customer_id?: string;
      customer?: components["schemas"]["customer"];
      payment_session?: components["schemas"]["payment_session"];
      payment_sessions?: components["schemas"]["payment_session"][];
      payment?: components["schemas"]["payment"];
      shipping_methods?: components["schemas"]["shipping_method"][];
      /** @enum {string} */
      type?: "default" | "swap" | "payment_link";
      /** Format: date-time */
      completed_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
      shipping_total?: number;
      discount_total?: number;
      tax_total?: number;
      subtotal?: number;
      refundable_amount?: number;
      gift_card_total?: number;
    };
    /**
     * Claim Image
     * @description Represents photo documentation of a claim.
     */
    claim_image: {
      id?: string;
      claim_item_id?: string;
      url?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Claim Item
     * @description Represents a claimed item along with information about the reasons for the claim.
     */
    claim_item: {
      id?: string;
      images?: components["schemas"]["claim_image"][];
      claim_order_id?: string;
      item_id?: string;
      /** @description The Line Item that the claim refers to */
      item?: components["schemas"]["line_item"];
      variant_id?: string;
      /** @description The Product Variant that is claimed. */
      variant?: components["schemas"]["product_variant"];
      /**
       * @description The reason for the claim
       * @enum {string}
       */
      reason?: "missing_item" | "wrong_item" | "production_failure" | "other";
      /** @description An optional note about the claim, for additional information */
      note?: string;
      /** @description The quantity of the item that is being claimed; must be less than or equal to the amount purchased in the original order. */
      quantity?: number;
      /** @description User defined tags for easy filtering and grouping. */
      tags?: components["schemas"]["claim_tag"][];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Claim Order
     * @description Claim Orders represent a group of faulty or missing items. Each claim order consists of a subset of items associated with an original order, and can contain additional information about fulfillments and returns.
     */
    claim_order: {
      id?: string;
      /** @enum {string} */
      type?: "refund" | "replace";
      /** @enum {string} */
      payment_status?: "na" | "not_refunded" | "refunded";
      /** @enum {string} */
      fulfillment_status?:
        | "not_fulfilled"
        | "partially_fulfilled"
        | "fulfilled"
        | "partially_shipped"
        | "shipped"
        | "partially_returned"
        | "returned"
        | "canceled"
        | "requires_action";
      /** @description The items that have been claimed */
      claim_items?: components["schemas"]["claim_item"][];
      /** @description Refers to the new items to be shipped when the claim order has the type `replace` */
      additional_items?: components["schemas"]["line_item"][];
      /** @description The id of the order that the claim comes from. */
      order_id?: string;
      /** @description Holds information about the return if the claim is to be returned */
      return_order?: components["schemas"]["return"];
      /** @description The id of the address that the new items should be shipped to */
      shipping_address_id?: string;
      /** @description The address that the new items should be shipped to */
      shipping_address?: components["schemas"]["address"];
      /** @description The shipping methods that the claim order will be shipped with. */
      shipping_methods?: components["schemas"]["shipping_method"][];
      /** @description The fulfillments of the new items to be shipped */
      fulfillments?: components["schemas"]["fulfillment"][];
      /** @description The amount that will be refunded in conjunction with the claim */
      refund_amount?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the Swap was canceled.
       */
      canceled_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      /** @description Flag for describing whether or not notifications related to this should be send. */
      no_notification?: boolean;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Claim Tag
     * @description Claim Tags are user defined tags that can be assigned to claim items for easy filtering and grouping.
     */
    claim_tag: {
      /** @description The id of the claim tag. Will be prefixed by `ctag_`. */
      id?: string;
      /** @description The value that the claim tag holds */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      update_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Country
     * @description Country details
     */
    country: {
      /** @description The database id of the country */
      id?: number;
      /** @description The 2 character ISO code for the country. */
      iso_2?: string;
      /** @description The 3 character ISO code for the country. */
      iso_3?: string;
      /** @description The numerical ISO code for the country. */
      num_code?: string;
      /** @description The normalized country name; in upper case. */
      name?: string;
      /** @description The country name appropriate for display. */
      display_name?: string;
    };
    /**
     * Currency
     * @description Currency
     */
    currency: {
      /** @description The 3 character ISO code for the currency. */
      code?: string;
      /** @description The symbol used to indicate the currency. */
      symbol?: string;
      /** @description The native symbol used to indicate the currency. */
      symbol_native?: string;
      /** @description The written name of the currency */
      name?: string;
    };
    /**
     * Custom Shipping Option
     * @description Custom Shipping Options are 'overriden' Shipping Options. Store managers can attach a Custom Shipping Option to a cart in order to set a custom price for a particular Shipping Option
     */
    custom_shipping_option: {
      /** @description The id of the Custom Shipping Option. This value will be prefixed with `cso_`. */
      id?: string;
      /** @description The custom price set that will override the shipping option's original price */
      price?: number;
      /** @description The id of the Shipping Option that the custom shipping option overrides */
      shipping_option_id?: Partial<components["schemas"]["shipping_option"]>;
      /** @description The id of the Cart that the custom shipping option is attached to */
      cart_id?: Partial<components["schemas"]["cart"]>;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Customer Group
     * @description Represents a customer group
     */
    customer_group: {
      id?: string;
      name?: string;
      customers?: { [key: string]: unknown }[];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Customer
     * @description Represents a customer
     */
    customer: {
      id?: string;
      email?: string;
      billing_address_id?: string;
      /** @description The Customer's billing address. */
      billing_address?: Partial<components["schemas"]["address"]>;
      shipping_addresses?: components["schemas"]["address"][];
      first_name?: string;
      last_name?: string;
      phone?: string;
      has_account?: boolean;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Discount Rule
     * @description Holds the rules that governs how a Discount is calculated when applied to a Cart.
     */
    discount_rule: {
      /** @description The id of the Discount Rule. Will be prefixed by `dru_`. */
      id?: string;
      /**
       * @description The type of the Discount, can be `fixed` for discounts that reduce the price by a fixed amount, `percentage` for percentage reductions or `free_shipping` for shipping vouchers.
       * @enum {string}
       */
      type?: "fixed" | "percentage" | "free_shipping";
      /** @description A short description of the discount */
      description?: string;
      /** @description The value that the discount represents; this will depend on the type of the discount */
      value?: number;
      /**
       * @description The scope that the discount should apply to.
       * @enum {string}
       */
      allocation?: "total" | "item";
      /** @description A set of Products that the discount can be used for. */
      valid_for?: components["schemas"]["product"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      update_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Discount
     * @description Represents a discount that can be applied to a cart for promotional purposes.
     */
    discount: {
      /** @description The id of the Discount. Will be prefixed by `disc_`. */
      id?: string;
      /** @description A unique code for the discount - this will be used by the customer to apply the discount */
      code?: string;
      /** @description A flag to indicate if multiple instances of the discount can be generated. I.e. for newsletter discounts */
      is_dynamic?: boolean;
      /** @description The Discount Rule that governs the behaviour of the Discount */
      rule?: Partial<components["schemas"]["discount_rule"]>;
      /** @description Whether the Discount has been disabled. Disabled discounts cannot be applied to carts */
      is_disabled?: boolean;
      /** @description The Discount that the discount was created from. This will always be a dynamic discount */
      parent_discount_id?: string;
      /**
       * Format: date-time
       * @description The time at which the discount can be used.
       */
      starts_at?: string;
      /**
       * Format: date-time
       * @description The time at which the discount can no longer be used.
       */
      ends_at?: string;
      /** @description The Regions in which the Discount can be used */
      regions?: components["schemas"]["region"][];
      /** @description The maximum number of times that a discount can be used. */
      usage_limit?: number;
      /** @description The number of times a discount has been used. */
      usage_count?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * DraftOrder
     * @description Represents a draft order
     */
    "draft-order": {
      id?: string;
      /** @enum {string} */
      status?: "open" | "completed";
      display_id?: string;
      cart_id?: string;
      cart?: Partial<components["schemas"]["cart"]>;
      order_id?: string;
      order?: Partial<components["schemas"]["order"]>;
      /** Format: date-time */
      canceled_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      update_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      /** Format: date-time */
      completed_at?: string;
      no_notification_order?: boolean;
      metadata?: { [key: string]: unknown };
      idempotency_key?: string;
    };
    /**
     * Fulfillment Item
     * @description Correlates a Line Item with a Fulfillment, keeping track of the quantity of the Line Item.
     */
    fulfillment_item: {
      /** @description The id of the Fulfillment that the Fulfillment Item belongs to. */
      fulfillment_id?: string;
      /** @description The id of the Line Item that the Fulfillment Item references. */
      item_id?: string;
      /** @description The Line Item that the Fulfillment Item references. */
      item?: Partial<components["schemas"]["line_item"]>;
      /** @description The quantity of the Line Item that is included in the Fulfillment. */
      quantity?: number;
    };
    /**
     * Fulfillment Provider
     * @description Represents a fulfillment provider plugin and holds its installation status.
     */
    fulfillment_provider: {
      /** @description The id of the fulfillment provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Fulfillment
     * @description Fulfillments are created once store operators can prepare the purchased goods. Fulfillments will eventually be shipped and hold information about how to track shipments. Fulfillments are created through a provider, which is typically an external shipping aggregator, shipping partner og 3PL, most plugins will have asynchronous communications with these providers through webhooks in order to automatically update and synchronize the state of Fulfillments.
     */
    fulfillment: {
      /** @description The id of the Fulfillment. This value will be prefixed by `ful_`. */
      id?: string;
      /** @description The id of the Claim that the Fulfillment belongs to. */
      claim_order_id?: string;
      /** @description The id of the Swap that the Fulfillment belongs to. */
      swap_id?: string;
      /** @description The id of the Order that the Fulfillment belongs to. */
      order_id?: string;
      /** @description The id of the Fulfillment Provider responsible for handling the fulfillment */
      provider_id?: string;
      /** @description The Fulfillment Items in the Fulfillment - these hold information about how many of each Line Item has been fulfilled. */
      items?: components["schemas"]["fulfillment_item"][];
      /** @description The Tracking Links that can be used to track the status of the Fulfillment, these will usually be provided by the Fulfillment Provider. */
      tracking_links?: components["schemas"]["tracking_link"][];
      /**
       * @deprecated
       * @description The tracking numbers that can be used to track the status of the fulfillment.
       */
      tracking_numbers?: string[];
      /**
       * Format: date-time
       * @description The date with timezone at which the Fulfillment was shipped.
       */
      shipped_at?: string;
      /** @description Flag for describing whether or not notifications related to this should be send. */
      no_notification?: boolean;
      /**
       * Format: date-time
       * @description The date with timezone at which the Fulfillment was canceled.
       */
      canceled_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Gift Card Transaction
     * @description Gift Card Transactions are created once a Customer uses a Gift Card to pay for their Order
     */
    gift_card_transaction: {
      /** @description The id of the Gift Card Transaction. This value will be prefixed by `gct_`. */
      id?: string;
      /** @description The id of the Gift Card that was used in the transaction. */
      gift_card_id?: string;
      /** @description The Gift Card that was used in the transaction. */
      gift_card?: Partial<components["schemas"]["gift_card"]>;
      /** @description The id of the Order that the Gift Card was used to pay for. */
      order_id?: string;
      /** @description The amount that was used from the Gift Card. */
      amount?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
    };
    /**
     * Gift Card
     * @description Gift Cards are redeemable and represent a value that can be used towards the payment of an Order.
     */
    gift_card: {
      /** @description The id of the Gift Card. This value will be prefixed by `gift_`. */
      id?: string;
      /** @description The unique code that identifies the Gift Card. This is used by the Customer to redeem the value of the Gift Card. */
      code?: string;
      /** @description The value that the Gift Card represents. */
      value?: number;
      /** @description The remaining value on the Gift Card. */
      balance?: number;
      /** @description The id of the Region in which the Gift Card is available. */
      region_id?: string;
      /** @description The Region in which the Gift Card is available. */
      region?: Partial<components["schemas"]["region"]>;
      /** @description The id of the Order that the Gift Card was purchased in. */
      order_id?: string;
      /** @description Whether the Gift Card has been disabled. Disabled Gift Cards cannot be applied to carts. */
      is_disabled?: boolean;
      /**
       * Format: date-time
       * @description The time at which the Gift Card can no longer be used.
       */
      ends_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Image
     * @description Images holds a reference to a URL at which the image file can be found.
     */
    image: {
      /** @description The id of the Image. This value will be prefixed by `img_`. */
      id?: string;
      /** @description The URL at which the image file can be found. */
      url?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      update_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Invite
     * @description Represents an invite
     */
    invite: {
      id?: string;
      user_email?: string;
      /** @enum {string} */
      role?: "admin" | "member" | "developer";
      accepted?: boolean;
      token?: string;
      /** Format: date-time */
      expores_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Line Item
     * @description Line Items represent purchasable units that can be added to a Cart for checkout. When Line Items are purchased they will get copied to the resulting order and can eventually be referenced in Fulfillments and Returns. Line Items may also be created when processing Swaps and Claims.
     */
    line_item: {
      /** @description The id of the Line Item. This value will be prefixed by `item_`. */
      id?: string;
      /** @description The id of the Cart that the Line Item belongs to. */
      cart_id?: string;
      /** @description The id of the Order that the Line Item belongs to. */
      order_id?: string;
      /** @description The id of the Swap that the Line Item belongs to. */
      swap_id?: string;
      /** @description The id of the Claim that the Line Item belongs to. */
      claim_order_id?: string;
      /** @description The title of the Line Item, this should be easily identifiable by the Customer. */
      title?: string;
      /** @description A more detailed description of the contents of the Line Item. */
      description?: string;
      /** @description A URL string to a small image of the contents of the Line Item. */
      thumbnail?: string;
      /** @description Flag to indicate if the Line Item is a Gift Card. */
      is_giftcard?: boolean;
      /** @description Flag to indicate if new Line Items with the same variant should be merged or added as an additional Line Item. */
      should_merge?: boolean;
      /** @description Flag to indicate if the Line Item should be included when doing discount calculations. */
      allow_discounts?: boolean;
      /** @description The price of one unit of the content in the Line Item. This should be in the currency defined by the Cart/Order/Swap/Claim that the Line Item belongs to. */
      unit_price?: boolean;
      /** @description The id of the Product Variant contained in the Line Item. */
      variant_id?: string;
      /** @description The Product Variant contained in the Line Item. */
      variant?: Partial<components["schemas"]["product_variant"]>;
      /** @description The quantity of the content in the Line Item. */
      quantity?: number;
      /** @description The quantity of the Line Item that has been fulfilled. */
      fulfilled_quantity?: number;
      /** @description The quantity of the Line Item that has been returned. */
      returned_quantity?: number;
      /** @description The quantity of the Line Item that has been shipped. */
      shipped_quantity?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
      /** @description The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration. */
      refundable?: number;
    };
    /**
     * Money Amount
     * @description Money Amounts represents an amount that a given Product Variant can be purcased for. Each Money Amount either has a Currency or Region associated with it to indicate the pricing in a given Currency or, for fully region-based pricing, the given price in a specific Region. If region-based pricing is used the amount will be in the currency defined for the Reigon.
     */
    money_amount: {
      /** @description The id of the Money Amount. This value will be prefixed by `ma_`. */
      id?: string;
      /** @description The 3 character currency code that the Money Amount is given in. */
      currency_code?: string;
      /** @description The amount in the smallest currecny unit (e.g. cents 100 cents to charge $1) that the Product Variant will cost. */
      amount?: number;
      /** @description An optional sale amount that the Product Variant will be available for when defined. */
      sale_amount?: number;
      /** @description The id of the Product Variant that the Money Amount belongs to. */
      variant_id?: string;
      /** @description The id of the Region that the Money Amount is defined for. */
      region_id?: string;
      /** @description The Region that the Money Amount is defined for. */
      region?: Partial<components["schemas"]["region"]>;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
    };
    /**
     * Note
     * @description Notes are elements which we can use in association with different resources to allow users to describe additional information in relation to these.
     */
    note: {
      /** @description The id of the Note. This value will be prefixed by `note_`. */
      id?: string;
      /** @description The type of resource that the Note refers to. */
      resource_type?: string;
      /** @description The id of the resource that the Note refers to. */
      resource_id?: string;
      /** @description The contents of the note. */
      value?: string;
      /** @description The author of the note. */
      author?: Partial<components["schemas"]["user"]>;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Notification Provider
     * @description Represents a notification provider plugin and holds its installation status.
     */
    notification_provider: {
      /** @description The id of the notification provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Notification
     * @description Notifications a communications sent via Notification Providers as a reaction to internal events such as `order.placed`. Notifications can be used to show a chronological timeline for communications sent to a Customer regarding an Order, and enables resends.
     */
    notification: {
      /** @description The id of the Notification. This value will be prefixed by `noti_`. */
      id?: string;
      /** @description The name of the event that the notification was sent for. */
      event_name?: string;
      /** @description The type of resource that the Notification refers to. */
      resource_type?: string;
      /** @description The id of the resource that the Notification refers to. */
      resource_id?: string;
      /** @description The id of the Customer that the Notification was sent to. */
      customer_id?: string;
      /** @description The Customer that the Notification was sent to. */
      customer?: Partial<components["schemas"]["customer"]>;
      /** @description The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id */
      to?: string;
      /** @description The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend. */
      data?: { [key: string]: unknown };
      /** @description The id of the Notification that was originally sent. */
      parent_id?: string;
      /** @description The resends that have been completed after the original Notification. */
      resends?: components["schemas"]["notification_resend"][];
      /** @description The id of the Notification Provider that handles the Notification. */
      provider_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
    };
    /**
     * Notification Resend
     * @description A resend of a Notification.
     */
    notification_resend: {
      /** @description The id of the Notification. This value will be prefixed by `noti_`. */
      id?: string;
      /** @description The name of the event that the notification was sent for. */
      event_name?: string;
      /** @description The type of resource that the Notification refers to. */
      resource_type?: string;
      /** @description The id of the resource that the Notification refers to. */
      resource_id?: string;
      /** @description The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id */
      to?: string;
      /** @description The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend. */
      data?: { [key: string]: unknown };
      /** @description The id of the Notification that was originally sent. */
      parent_id?: string;
      /** @description The id of the Notification Provider that handles the Notification. */
      provider_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
    };
    /**
     * OAuth
     * @description Represent an OAuth app
     */
    OAuth: {
      id?: string;
      display_name?: string;
      application_name?: string;
      install_url?: string;
      uninstall_url?: number;
      data?: { [key: string]: unknown };
    };
    /**
     * Order
     * @description Represents an order
     */
    order: {
      id?: string;
      /** @enum {string} */
      status?:
        | "pending"
        | "completed"
        | "archived"
        | "canceled"
        | "requires_action";
      /** @enum {string} */
      fulfillment_status?:
        | "not_fulfilled"
        | "partially_fulfilled"
        | "fulfilled"
        | "partially_shipped"
        | "shipped"
        | "partially_returned"
        | "returned"
        | "canceled"
        | "requires_action";
      /** @enum {string} */
      payment_status?:
        | "not_paid"
        | "awaiting"
        | "captured"
        | "partially_refunded"
        | "refuneded"
        | "canceled"
        | "requires_action";
      display_id?: number;
      cart_id?: string;
      currency_code?: string;
      tax_rate?: number;
      discounts?: components["schemas"]["discount"][];
      email?: string;
      billing_address_id?: string;
      billing_address?: Partial<components["schemas"]["address"]>;
      shipping_address_id?: string;
      shipping_address?: Partial<components["schemas"]["address"]>;
      items?: components["schemas"]["line_item"][];
      region_id?: string;
      region?: Partial<components["schemas"]["region"]>;
      gift_cards?: components["schemas"]["gift_card"][];
      customer_id?: string;
      customer?: Partial<components["schemas"]["customer"]>;
      payment_session?: Partial<components["schemas"]["payment_session"]>;
      payment_sessions?: components["schemas"]["payment_session"][];
      payments?: components["schemas"]["payment"][];
      shipping_methods?: components["schemas"]["shipping_method"][];
      fulfillments?: components["schemas"]["fulfillment"][];
      returns?: components["schemas"]["return"][];
      claims?: components["schemas"]["claim_order"][];
      refunds?: components["schemas"]["refund"][];
      swaps?: components["schemas"]["refund"][];
      gift_card_transactions?: components["schemas"]["gift_card_transaction"][];
      /** Format: date-time */
      canceled_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      update_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
      shipping_total?: number;
      discount_total?: number;
      tax_total?: number;
      subtotal?: number;
      refundable_amount?: number;
      gift_card_total?: number;
      paid_total?: number;
      /** @description Flag for describing whether or not notifications related to this should be send. */
      no_notification?: boolean;
    };
    /**
     * Payment Provider
     * @description Represents a Payment Provider plugin and holds its installation status.
     */
    payment_provider: {
      /** @description The id of the payment provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Payment Session
     * @description Payment Sessions are created when a Customer initilizes the checkout flow, and can be used to hold the state of a payment flow. Each Payment Session is controlled by a Payment Provider, who is responsible for the communication with external payment services. Authorized Payment Sessions will eventually get promoted to Payments to indicate that they are authorized for capture/refunds/etc.
     */
    payment_session: {
      /** @description The id of the Payment Session. This value will be prefixed with `ps_`. */
      id?: string;
      /** @description The id of the Cart that the Payment Session is created for. */
      cart_id?: string;
      /** @description The id of the Payment Provider that is responsible for the Payment Session */
      provider_id?: string;
      /** @description A flag to indicate if the Payment Session has been selected as the method that will be used to complete the purchase. */
      is_selected?: boolean;
      /**
       * @description Indicates the status of the Payment Session. Will default to `pending`, and will eventually become `authorized`. Payment Sessions may have the status of `requires_more` to indicate that further actions are to be completed by the Customer.
       * @enum {string}
       */
      status?:
        | "authorized"
        | "pending"
        | "requires_more"
        | "error"
        | "canceled";
      /** @description The data required for the Payment Provider to identify, modify and process the Payment Session. Typically this will be an object that holds an id to the external payment session, but can be an empty object if the Payment Provider doesn't hold any state. */
      data?: { [key: string]: unknown };
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
    };
    /**
     * Payment
     * @description Payments represent an amount authorized with a given payment method, Payments can be captured, canceled or refunded.
     */
    payment: {
      /** @description The id of the Payment. This value will be prefixed with `pay_`. */
      id?: string;
      /** @description The id of the Swap that the Payment is used for. */
      swap_id?: string;
      /** @description The id of the Order that the Payment is used for. */
      order_id?: string;
      /** @description The id of the Cart that the Payment Session is created for. */
      cart_id?: string;
      /** @description The amount that the Payment has been authorized for. */
      amount?: number;
      /** @description The 3 character ISO currency code that the Payment is completed in. */
      currency_code?: string;
      /** @description The amount of the original Payment amount that has been refunded back to the Customer. */
      amount_refunded?: number;
      /** @description The id of the Payment Provider that is responsible for the Payment */
      provider_id?: string;
      /** @description The data required for the Payment Provider to identify, modify and process the Payment. Typically this will be an object that holds an id to the external payment session, but can be an empty object if the Payment Provider doesn't hold any state. */
      data?: { [key: string]: unknown };
      /**
       * Format: date-time
       * @description The date with timezone at which the Payment was captured.
       */
      captured_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the Payment was canceled.
       */
      canceled_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Collection
     * @description Product Collections represents a group of Products that are related.
     */
    product_collection: {
      /** @description The id of the Product Collection. This value will be prefixed with `pcol_`. */
      id?: string;
      /** @description The title that the Product Collection is identified by. */
      title?: string;
      /** @description A unique string that identifies the Product Collection - can for example be used in slug structures. */
      handle?: string;
      /** @description The Products contained in the Product Collection. */
      products?: { [key: string]: unknown }[];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Option Value
     * @description A value given to a Product Variant's option set. Product Variant have a Product Option Value for each of the Product Options defined on the Product.
     */
    product_option_value: {
      /** @description The id of the Product Option Value. This value will be prefixed with `optval_`. */
      id?: string;
      /** @description The value that the Product Variant has defined for the specific Product Option (e.g. if the Product Option is "Size" this value could be "Small", "Medium" or "Large"). */
      value?: string;
      /** @description The id of the Product Option that the Product Option Value is defined for. */
      option_id?: string;
      /** @description The id of the Product Variant that the Product Option Value is defined for. */
      variant_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Option
     * @description Product Options define properties that may vary between different variants of a Product. Common Product Options are "Size" and "Color", but Medusa doesn't limit what Product Options that can be defined.
     */
    product_option: {
      /** @description The id of the Product Option. This value will be prefixed with `opt_`. */
      id?: string;
      /** @description The title that the Product Option is defined by (e.g. "Size"). */
      title?: string;
      /** @description The Product Option Values that are defined for the Product Option. */
      values?: components["schemas"]["product_option_value"][];
      /** @description The id of the Product that the Product Option is defined for. */
      product_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Tag
     * @description Product Tags can be added to Products for easy filtering and grouping.
     */
    product_tag: {
      /** @description The id of the Product Tag. This value will be prefixed with `ptag_`. */
      id?: string;
      /** @description The value that the Product Tag represents (e.g. "Pants"). */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Tax Rate
     * @description Associates a tax rate with a product to indicate that the product is taxed in a certain way
     */
    product_tax_rate: {
      /** @description The id of the Product */
      product_id?: string;
      /** @description The id of the Tax Rate */
      rate_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Type Tax Rate
     * @description Associates a tax rate with a product type to indicate that the product type is taxed in a certain way
     */
    product_type_tax_rate: {
      /** @description The id of the Product type */
      product_type_id?: string;
      /** @description The id of the Tax Rate */
      rate_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Type
     * @description Product Type can be added to Products for filtering and reporting purposes.
     */
    product_type: {
      /** @description The id of the Product Type. This value will be prefixed with `ptyp_`. */
      id?: string;
      /** @description The value that the Product Type represents (e.g. "Clothing"). */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Variant
     * @description Product Variants represent a Product with a specific set of Product Option configurations. The maximum number of Product Variants that a Product can have is given by the number of available Product Option combinations.
     */
    product_variant: {
      /** @description The id of the Product Variant. This value will be prefixed with `variant_`. */
      id?: string;
      /** @description A title that can be displayed for easy identification of the Product Variant. */
      title?: string;
      /** @description The id of the Product that the Product Variant belongs to. */
      product_id?: string;
      /** @description The Money Amounts defined for the Product Variant. Each Money Amount represents a price in a given currency or a price in a specific Region. */
      prices?: components["schemas"]["money_amount"][];
      /** @description The unique stock keeping unit used to identify the Product Variant. This will usually be a unqiue identifer for the item that is to be shipped, and can be referenced across multiple systems. */
      sku?: string;
      /** @description A generic field for a GTIN number that can be used to identify the Product Variant. */
      barcode?: string;
      /** @description An EAN barcode number that can be used to identify the Product Variant. */
      ean?: string;
      /** @description A UPC barcode number that can be used to identify the Product Variant. */
      upc?: string;
      /** @description The current quantity of the item that is stocked. */
      inventory_quantity?: number;
      /** @description Whether the Product Variant should be purchasable when `inventory_quantity` is 0. */
      allow_backorder?: boolean;
      /** @description Whether Medusa should manage inventory for the Product Variant. */
      manage_inventory?: boolean;
      /** @description The Harmonized System code of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      hs_code?: string;
      /** @description The country in which the Product Variant was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      origin_country?: string;
      /** @description The Manufacturers Identification code that identifies the manufacturer of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      mid_code?: string;
      /** @description The material and composition that the Product Variant is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      material?: string;
      /** @description The weight of the Product Variant. May be used in shipping rate calculations. */
      weight?: string;
      /** @description The height of the Product Variant. May be used in shipping rate calculations. */
      height?: string;
      /** @description The width of the Product Variant. May be used in shipping rate calculations. */
      width?: string;
      /** @description The length of the Product Variant. May be used in shipping rate calculations. */
      length?: string;
      /** @description The Product Option Values specified for the Product Variant. */
      options?: components["schemas"]["product_option_value"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product
     * @description Products are a grouping of Product Variants that have common properties such as images and descriptions. Products can have multiple options which define the properties that Product Variants differ by.
     */
    product: {
      /** @description The id of the Product. This value will be prefixed with `prod_`. */
      id?: string;
      /** @description A title that can be displayed for easy identification of the Product. */
      title?: string;
      /** @description An optional subtitle that can be used to further specify the Product. */
      subtitle?: string;
      /** @description A short description of the Product. */
      description?: string;
      /** @description A unique identifier for the Product (e.g. for slug structure). */
      handle?: string;
      /** @description Whether the Product represents a Gift Card. Products that represent Gift Cards will automatically generate a redeemable Gift Card code once they are purchased. */
      is_giftcard?: boolean;
      /** @description Whether the Product can be discounted. Discounts will not apply to Line Items of this Product when this flag is set to `false`. */
      discountable?: boolean;
      /** @description Images of the Product */
      images?: components["schemas"]["image"][];
      /** @description A URL to an image file that can be used to identify the Product. */
      thumbnail?: string;
      /** @description The Product Options that are defined for the Product. Product Variants of the Product will have a unique combination of Product Option Values. */
      options?: components["schemas"]["product_option"][];
      /** @description The Product Variants that belong to the Product. Each will have a unique combination of Product Option Values. */
      variants?: components["schemas"]["product_variant"][];
      /** @description The id of the Shipping Profile that the Product belongs to. Shipping Profiles have a set of defined Shipping Options that can be used to Fulfill a given set of Products. */
      profile_id?: string;
      /** @description The Harmonized System code of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      hs_code?: string;
      /** @description The country in which the Product Variant was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      origin_country?: string;
      /** @description The Manufacturers Identification code that identifies the manufacturer of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      mid_code?: string;
      /** @description The material and composition that the Product Variant is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      material?: string;
      /** @description The weight of the Product Variant. May be used in shipping rate calculations. */
      weight?: string;
      /** @description The height of the Product Variant. May be used in shipping rate calculations. */
      height?: string;
      /** @description The width of the Product Variant. May be used in shipping rate calculations. */
      width?: string;
      /** @description The length of the Product Variant. May be used in shipping rate calculations. */
      length?: string;
      /** @description The Product Type of the Product (e.g. "Clothing") */
      type?: Partial<components["schemas"]["product_type"]>;
      /** @description The Product Collection that the Product belongs to (e.g. "SS20") */
      collection?: Partial<components["schemas"]["product_collection"]>;
      /** @description The Product Tags assigned to the Product. */
      tags?: components["schemas"]["product_tag"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Refund
     * @description Refund represent an amount of money transfered back to the Customer for a given reason. Refunds may occur in relation to Returns, Swaps and Claims, but can also be initiated by a store operator.
     */
    refund: {
      /** @description The id of the Refund. This value will be prefixed with `ref_`. */
      id?: string;
      /** @description The id of the Order that the Refund is related to. */
      order_id?: string;
      /** @description The amount that has be refunded to the Customer. */
      amount?: number;
      /** @description An optional note explaining why the amount was refunded. */
      note?: string;
      /**
       * @description The reason given for the Refund, will automatically be set when processed as part of a Swap, Claim or Return.
       * @enum {string}
       */
      reason?: "discount" | "return" | "swap" | "claim" | "other";
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Region
     * @description Regions hold settings for how Customers in a given geographical location shop. The is, for example, where currencies and tax rates are defined. A Region can consist of multiple countries to accomodate common shopping settings across countries.
     */
    region: {
      /** @description The id of the Region. This value will be prefixed with `reg_`. */
      id?: string;
      /** @description The name of the region as displayed to the customer. If the Region only has one country it is recommended to write the country name. */
      name?: string;
      /** @description The 3 character ISO currency code that Customers will shop in in the Region. */
      currency_code?: string;
      /** @description The tax rate that should be charged on purchases in the Region. */
      tax_rate?: number;
      /** @description The tax code used on purchases in the Region. This may be used by other systems for accounting purposes. */
      tax_code?: string;
      /** @description The countries that are included in the Region. */
      countries?: components["schemas"]["country"][];
      /** @description The Payment Providers that can be used to process Payments in the Region. */
      payment_providers?: components["schemas"]["payment_provider"][];
      /** @description The Fulfillment Providers that can be used to fulfill orders in the Region. */
      fulfillment_providers?: components["schemas"]["fulfillment_provider"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Return Item
     * @description Correlates a Line Item with a Return, keeping track of the quantity of the Line Item that will be returned.
     */
    return_item: {
      /** @description The id of the Return that the Return Item belongs to. */
      return_id?: string;
      /** @description The id of the Line Item that the Return Item references. */
      item_id?: string;
      /** @description The Line Item that the Return Item references. */
      item?: Partial<components["schemas"]["line_item"]>;
      /** @description The quantity of the Line Item that is included in the Return. */
      quantity?: number;
      /** @description Whether the Return Item was requested initially or received unexpectedly in the warehouse. */
      is_requested?: boolean;
      /** @description The quantity that was originally requested to be returned. */
      requested_quantity?: number;
      /** @description The quantity that was received in the warehouse. */
      recieved_quantity?: number;
      /** @description The reason for returning the item. */
      reason?: Partial<components["schemas"]["return_reason"]>;
      /** @description An optional note with additional details about the Return. */
      note?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Return Reason
     * @description A Reason for why a given product is returned. A Return Reason can be used on Return Items in order to indicate why a Line Item was returned.
     */
    return_reason: {
      /** @description The id of the Return Reason will start with `rr_`. */
      id?: string;
      /** @description A description of the Reason. */
      description?: string;
      /** @description A text that can be displayed to the Customer as a reason. */
      label?: string;
      /** @description The value to identify the reason by. */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Return
     * @description Return orders hold information about Line Items that a Customer wishes to send back, along with how the items will be returned. Returns can be used as part of a Swap.
     */
    return: {
      /** @description The id of the Return. This value will be prefixed with `ret_`. */
      id?: string;
      /**
       * @description Status of the Return.
       * @enum {string}
       */
      status?: "requested" | "received" | "requires_action";
      /** @description The Return Items that will be shipped back to the warehouse. type: array items: $ref: */
      items?: unknown;
      /** @description The id of the Swap that the Return is a part of. */
      swap_id?: string;
      /** @description The id of the Order that the Return is made from. */
      order_id?: string;
      /** @description The id of the Claim that the Return is a part of. */
      claim_order_id?: string;
      /** @description The Shipping Method that will be used to send the Return back. Can be null if the Customer facilitates the return shipment themselves. */
      shipping_method?: Partial<components["schemas"]["shipping_method"]>;
      /** @description Data about the return shipment as provided by the Fulfilment Provider that handles the return shipment. */
      shipping_data?: { [key: string]: unknown };
      /** @description The amount that should be refunded as a result of the return. */
      refund_amount?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the return was received.
       */
      received_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description When set to true, no notification will be sent related to this return. */
      no_notification?: boolean;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Shipping Method
     * @description Shipping Methods represent a way in which an Order or Return can be shipped. Shipping Methods are built from a Shipping Option, but may contain additional details, that can be necessary for the Fulfillment Provider to handle the shipment.
     */
    shipping_method: {
      /** @description The id of the Shipping Method. This value will be prefixed with `sm_`. */
      id?: string;
      /** @description The id of the Shipping Option that the Shipping Method is built from. */
      shipping_option_id?: string;
      /** @description The Shipping Option that the Shipping Method is built from. */
      shipping_option?: Partial<components["schemas"]["shipping_option"]>;
      /** @description The id of the Order that the Shipping Method is used on. */
      order_id?: string;
      /** @description The id of the Return that the Shipping Method is used on. */
      return_id?: string;
      /** @description The id of the Swap that the Shipping Method is used on. */
      swap_id?: string;
      /** @description The id of the Cart that the Shipping Method is used on. */
      cart_id?: string;
      /** @description The id of the Claim that the Shipping Method is used on. */
      claim_order_id?: string;
      /** @description The amount to charge for the Shipping Method. The currency of the price is defined by the Region that the Order that the Shipping Method belongs to is a part of. */
      price?: number;
      /** @description Additional data that the Fulfillment Provider needs to fulfill the shipment. This is used in combination with the Shipping Options data, and may contain information such as a drop point id. */
      data?: { [key: string]: unknown };
    };
    /**
     * Shipping Option Requirement
     * @description A requirement that a Cart must satisfy for the Shipping Option to be available to the Cart.
     */
    shipping_option_requirement: {
      /** @description The id of the Shipping Option Requirement. This value will be prefixed with `sor_`. */
      id?: string;
      /** @description The id of the Shipping Option that the Shipping Option Requirement belongs to. */
      shipping_option_id?: string;
      /**
       * @description The type of the requirement, this defines how the value will be compared to the Cart's total. `min_subtotal` requirements define the minimum subtotal that is needed for the Shipping Option to be available, while the `max_subtotal` defines the maximum subtotal that the Cart can have for the Shipping Option to be available.
       * @enum {string}
       */
      type?: "min_subtotal" | "max_subtotal";
      /** @description The amount to compare the Cart subtotal to. */
      amount?: number;
    };
    /**
     * Shipping Option
     * @description Shipping Options represent a way in which an Order or Return can be shipped. Shipping Options have an associated Fulfillment Provider that will be used when the fulfillment of an Order is initiated. Shipping Options themselves cannot be added to Carts, but serve as a template for Shipping Methods. This distinction makes it possible to customize individual Shipping Methods with additional information.
     */
    shipping_option: {
      /** @description The id of the Shipping Option. This value will be prefixed with `so_`. */
      id?: string;
      /** @description The name given to the Shipping Option - this may be displayed to the Customer. */
      name?: string;
      /** @description The id of the Region that the Shipping Option belongs to. */
      region_id?: string;
      /** @description The id of the Region that the Shipping Option belongs to. */
      region?: Partial<components["schemas"]["region"]>;
      /** @description The id of the Shipping Profile that the Shipping Option belongs to. Shipping Profiles have a set of defined Shipping Options that can be used to Fulfill a given set of Products. */
      profile_id?: string;
      /** @description The id of the Fulfillment Provider, that will be used to process Fulfillments from the Shipping Option. */
      provider_id?: string;
      /**
       * @description The type of pricing calculation that is used when creatin Shipping Methods from the Shipping Option. Can be `flat_rate` for fixed prices or `calculated` if the Fulfillment Provider can provide price calulations.
       * @enum {string}
       */
      price_type?: "flat_rate" | "calculated";
      /** @description The amount to charge for shipping when the Shipping Option price type is `flat_rate`. */
      amount?: number;
      /** @description Flag to indicate if the Shipping Option can be used for Return shipments. */
      is_return?: boolean;
      /** @description The requirements that must be satisfied for the Shipping Option to be available for a Cart. */
      requirements?: components["schemas"]["shipping_option_requirement"][];
      /** @description The data needed for the Fulfillment Provider to identify the Shipping Option. */
      data?: { [key: string]: unknown };
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Shipping Profile
     * @description Shipping Profiles have a set of defined Shipping Options that can be used to fulfill a given set of Products.
     */
    shipping_profile: {
      /** @description The id of the Shipping Profile. This value will be prefixed with `sp_`. */
      id?: string;
      /** @description The name given to the Shipping profile - this may be displayed to the Customer. */
      name?: string;
      /**
       * @description The type of the Shipping Profile, may be `default`, `gift_card` or `custom`.
       * @enum {string}
       */
      type?: "default" | "gift_card" | "custom";
      /** @description The Products that the Shipping Profile defines Shipping Options for. */
      products?: components["schemas"]["product"][];
      /** @description The Shipping Options that can be used to fulfill the Products in the Shipping Profile. */
      shipping_options?: Partial<components["schemas"]["shipping_option"]>[];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Shipping Tax Rate
     * @description Associates a tax rate with a shipping option to indicate that the shipping option is taxed in a certain way
     */
    shipping_tax_rate: {
      /** @description The id of the Shipping Option */
      shipping_option_id?: string;
      /** @description The id of the Tax Rate */
      rate_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Store
     * @description Holds settings for the Store, such as name, currencies, etc.
     */
    store: {
      /** @description The id of the Store. This value will be prefixed with `store_`. */
      id?: string;
      /** @description The name of the Store - this may be displayed to the Customer. */
      name?: string;
      /** @description The default currency code used when no other currency code is specified. */
      default_currency_code?: string;
      /** @description The currencies that are enabled for the Store. */
      currencies?: components["schemas"]["currency"][];
      /** @description A template to generate Swap links from use {{cart_id}} to include the Swap's `cart_id` in the link. */
      swap_link_template?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Swap
     * @description Swaps can be created when a Customer wishes to exchange Products that they have purchased to different Products. Swaps consist of a Return of previously purchased Products and a Fulfillment of new Products, the amount paid for the Products being returned will be used towards payment for the new Products. In the case where the amount paid for the the Products being returned exceed the amount to be paid for the new Products, a Refund will be issued for the difference.
     */
    swap: {
      /** @description The id of the Swap. This value will be prefixed with `swap_`. */
      id?: string;
      /**
       * @description The status of the Fulfillment of the Swap.
       * @enum {string}
       */
      fulfillment_status?:
        | "not_fulfilled"
        | "partially_fulfilled"
        | "fulfilled"
        | "partially_shipped"
        | "shipped"
        | "partially_returned"
        | "returned"
        | "canceled"
        | "requires_action";
      /**
       * @description The status of the Payment of the Swap. The payment may either refer to the refund of an amount or the authorization of a new amount.
       * @enum {string}
       */
      payment_status?:
        | "not_paid"
        | "awaiting"
        | "captured"
        | "canceled"
        | "difference_refunded"
        | "requires_action";
      /** @description The id of the Order where the Line Items to be returned where purchased. */
      order_id?: string;
      /** @description The new Line Items to ship to the Customer. */
      additional_items?: components["schemas"]["line_item"][];
      /** @description The Return that is issued for the return part of the Swap. */
      return_order?: Partial<components["schemas"]["return"]>;
      /** @description The Fulfillments used to send the new Line Items. */
      fulfillments?: components["schemas"]["fulfillment"][];
      /** @description The Payment authorized when the Swap requires an additional amount to be charged from the Customer. */
      payment?: Partial<components["schemas"]["payment"]>;
      /** @description The difference that is paid or refunded as a result of the Swap. May be negative when the amount paid for the returned items exceed the total of the new Products. */
      difference_due?: number;
      /** @description The Address to send the new Line Items to - in most cases this will be the same as the shipping address on the Order. */
      shipping_address?: Partial<components["schemas"]["address"]>;
      /** @description The Shipping Methods used to fulfill the addtional items purchased. */
      shipping_methods?: components["schemas"]["shipping_method"][];
      /** @description The id of the Cart that the Customer will use to confirm the Swap. */
      cart_id?: string;
      /** @description If true, swaps can be completed with items out of stock */
      allow_backorder?: boolean;
      /**
       * Format: date-time
       * @description The date with timezone at which the Swap was confirmed by the Customer.
       */
      confirmed_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the Swap was canceled.
       */
      canceled_at?: string;
      /** @description If set to true, no notification will be sent related to this swap */
      no_notification?: boolean;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Tax Line
     * @description Line item that specifies an amount of tax to add to a line item.
     */
    tax_line: {
      /** @description The id of the Tax Line. This value will be prefixed by `tl_`. */
      id?: string;
      /** @description A code to identify the tax type by */
      code?: string;
      /** @description A human friendly name for the tax */
      name?: string;
      /** @description The numeric rate to charge tax by */
      rate?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Tax Provider
     * @description The tax service used to calculate taxes
     */
    tax_provider: {
      /** @description The id of the tax provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Tax Rate
     * @description A Tax Rate can be used to associate a certain rate to charge on products within a given Region
     */
    tax_rate: {
      /** @description The id of the Tax Rate. This value will be prefixed by `txr_`. */
      id?: string;
      /** @description The numeric rate to charge */
      rate?: number;
      /** @description A code to identify the tax type by */
      code?: string;
      /** @description A human friendly name for the tax */
      name?: string;
      /** @description The id of the Region that the rate belongs to */
      region_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
      /** @description The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration. */
      refundable?: number;
    };
    /**
     * Tracking Link
     * @description Tracking Link holds information about tracking numbers for a Fulfillment. Tracking Links can optionally contain a URL that can be visited to see the status of the shipment.
     */
    tracking_link: {
      /** @description The id of the Tracking Link. This value will be prefixed with `tlink_`. */
      id?: string;
      /** @description The URL at which the status of the shipment can be tracked. */
      url?: string;
      /** @description The tracking number given by the shipping carrier. */
      tracking_number?: string;
      /** @description The id of the Fulfillment that the Tracking Link references. */
      fulfillment_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * User
     * @description Represents a User who can manage store settings.
     */
    user: {
      /** @description The unique id of the User. This will be prefixed with `usr_` */
      id?: string;
      /** @description The email of the User */
      email?: string;
      first_name?: string;
      /** @description The Customer's billing address. */
      last_name?: Partial<components["schemas"]["address"]>;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
  };
}

export interface operations {
  /** Retrieve a list of applications. */
  GetApps: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["OAuth"];
          };
        };
      };
    };
  };
  /** Generates a token for an application. */
  PostApps: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            apps?: components["schemas"]["OAuth"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of the application for the token to be generated for. */
          application_name: string;
          /** @description State of the application. */
          state: string;
          /** @description The code for the generated token. */
          code: string;
        };
      };
    };
  };
  /** Gets the currently logged in User. */
  GetAuth: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            user?: components["schemas"]["user"];
          };
        };
      };
    };
  };
  /** Logs a User in and authorizes them to manage Store settings. */
  PostAuth: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            user?: components["schemas"]["user"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The User's email. */
          email: string;
          /** @description The User's password. */
          password: string;
        };
      };
    };
  };
  /** Updates products associated with a Product Collection */
  PostProductsToCollection: {
    parameters: {
      path: {
        /** The id of the Collection. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description An array of Product IDs to add to the Product Collection. */
          product_ids?: {
            /** @description The ID of a Product to add to the Product Collection. */
            id?: string;
          }[];
        };
      };
    };
  };
  /** Removes products associated with a Product Collection */
  DeleteProductsFromCollection: {
    parameters: {
      path: {
        /** The id of the Collection. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description An array of Product IDs to remove from the Product Collection. */
          product_ids?: {
            /** @description The ID of a Product to remove from the Product Collection. */
            id?: string;
          }[];
        };
      };
    };
  };
  /** Retrieve a list of Product Collection. */
  GetCollections: {
    parameters: {
      query: {
        /** The number of collections to return. */
        limit?: string;
        /** The offset of collections to return. */
        offset?: string;
        /** The title of collections to return. */
        title?: string;
        /** The handle of collections to return. */
        handle?: string;
        /** Date comparison for when resulting collections was deleted, i.e. less than, greater than etc. */
        deleted_at?: { [key: string]: unknown };
        /** Date comparison for when resulting collections was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting collections was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["product_collection"];
          };
        };
      };
    };
  };
  /** Creates a Product Collection. */
  PostCollections: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["product_collection"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title to identify the Collection by. */
          title: string;
          /** @description An optional handle to be used in slugs, if none is provided we will kebab-case the title. */
          handle?: string;
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Product Collection. */
  GetCollectionsCollection: {
    parameters: {
      path: {
        /** The id of the Product Collection */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["product_collection"];
          };
        };
      };
    };
  };
  /** Updates a Product Collection. */
  PostCollectionsCollection: {
    parameters: {
      path: {
        /** The id of the Collection. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["product_collection"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title to identify the Collection by. */
          title?: string;
          /** @description An optional handle to be used in slugs, if none is provided we will kebab-case the title. */
          handle?: string;
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a Product Collection. */
  DeleteCollectionsCollection: {
    parameters: {
      path: {
        /** The id of the Collection. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Collection */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Creates a CustomerGroup. */
  PostCustomerGroups: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer_group?: components["schemas"]["customer_group"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of the customer group */
          name: string;
          /** @description Metadata for the customer. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Update a CustomerGroup. */
  PostCustomerGroupsGroup: {
    parameters: {
      path: {
        /** The id of the customer group. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer_group?: components["schemas"]["customer_group"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of the customer group */
          name: string;
          /** @description Metadata for the customer. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a CustomerGroup. */
  DeleteCustomerGroupsCustomerGroup: {
    parameters: {
      path: {
        /** The id of the Customer Group */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted customer group. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a Customer Group. */
  GetCustomerGroupsGroup: {
    parameters: {
      path: {
        /** The id of the Customer Group. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer_group?: components["schemas"]["customer_group"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Customers. */
  GetCustomers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
  };
  /** Creates a Customer. */
  PostCustomers: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Customer's email address. */
          email: string;
          /** @description The Customer's first name. */
          first_name: string;
          /** @description The Customer's last name. */
          last_name: string;
          /** @description The Customer's phone number. */
          phone?: string;
          /** @description Metadata for the customer. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Customer. */
  GetCustomersCustomer: {
    parameters: {
      path: {
        /** The id of the Customer. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
  };
  /** Updates a Customer. */
  PostCustomersCustomer: {
    parameters: {
      path: {
        /** The id of the Customer. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Customer's email. Only providable if user not registered. */
          email?: string;
          /** @description The Customer's first name. */
          first_name?: string;
          /** @description The Customer's last name. */
          last_name?: string;
          /** @description The Customer's phone number. */
          phone?: string;
          /** @description The Customer's password. */
          password?: string;
          /** @description A list of customer groups to which the customer belongs. */
          groups?: {
            /** @description The id of a customer group */
            id: string;
          }[];
          /** @description Metadata for the customer. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Adds a Region to the list of Regions that a Discount can be used in. */
  PostDiscountsDiscountRegionsRegion: {
    parameters: {
      path: {
        /** The id of the Discount. */
        id: string;
        /** The id of the Region. */
        region_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Removes a Region from the list of Regions that a Discount can be used in. */
  DeleteDiscountsDiscountRegionsRegion: {
    parameters: {
      path: {
        /** The id of the Discount. */
        id: string;
        /** The id of the Region. */
        region_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Adds a Product to the list of Products that a Discount can be used for. */
  PostDiscountsDiscountProductsProduct: {
    parameters: {
      path: {
        /** The id of the Discount. */
        id: string;
        /** The id of the Product. */
        product_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Removes a Product from the list of Products that a Discount can be used for. */
  DeleteDiscountsDiscountProductsProduct: {
    parameters: {
      path: {
        /** The id of the Discount. */
        id: string;
        /** The id of the Product. */
        product_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Discounts */
  GetDiscounts: {
    parameters: {
      query: {
        /** Search query applied on results. */
        q?: string;
        /** Return only dynamic discounts. */
        is_dynamic?: boolean;
        /** Return only disabled discounts. */
        is_disabled?: boolean;
        /** The number of items in the response */
        limit?: number;
        /** The offset of items in response */
        offset?: number;
        /** Comma separated list of relations to include in the results. */
        expand?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Creates a Discount with a given set of rules that define how the Discount behaves. */
  PostDiscounts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description A unique code that will be used to redeem the Discount */
          code?: string;
          /** @description Whether the Discount should have multiple instances of itself, each with a different code. This can be useful for automatically generated codes that all have to follow a common set of rules. */
          is_dynamic?: string;
          /** @description The Discount Rule that defines how Discounts are calculated */
          rule?: components["schemas"]["discount_rule"];
          /** @description Whether the Discount code is disabled on creation. You will have to enable it later to make it available to Customers. */
          is_disabled?: boolean;
          /**
           * Format: date-time
           * @description The time at which the Discount should be available.
           */
          starts_at?: string;
          /**
           * Format: date-time
           * @description The time at which the Discount should no longer be available.
           */
          ends_at?: string;
          /** @description A list of Region ids representing the Regions in which the Discount can be used. */
          regions?: string[];
          /** @description Maximum times the discount can be used */
          usage_limit?: number;
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Creates a unique code that can map to a parent Discount. This is useful if you want to automatically generate codes with the same behaviour. */
  PostDiscountsDiscountDynamicCodes: {
    parameters: {
      path: {
        /** The id of the Discount to create the dynamic code from." */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The unique code that will be used to redeem the Discount. */
          code: string;
          /** @description An optional set of key-value paris to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Discount */
  GetDiscountsDiscount: {
    parameters: {
      path: {
        /** The id of the Discount */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Updates a Discount with a given set of rules that define how the Discount behaves. */
  PostDiscountsDiscount: {
    parameters: {
      path: {
        /** The id of the Discount. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description A unique code that will be used to redeem the Discount */
          code?: string;
          /** @description Whether the Discount should have multiple instances of itself, each with a different code. This can be useful for automatically generated codes that all have to follow a common set of rules. */
          is_dynamic?: string;
          /** @description The Discount Rule that defines how Discounts are calculated */
          rule?: components["schemas"]["discount_rule"];
          /** @description Whether the Discount code is disabled on creation. You will have to enable it later to make it available to Customers. */
          is_disabled?: boolean;
          /** @description The time at which the Discount should be available. */
          starts_at?: unknown;
          /** @description The time at which the Discount should no longer be available. */
          ends_at?: unknown;
          /** @description A list of Region ids representing the Regions in which the Discount can be used. */
          regions?: string[];
          /** @description An object containing metadata of the discount */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a Discount. */
  DeleteDiscountsDiscount: {
    parameters: {
      path: {
        /** The id of the Discount */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Discount */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Deletes a dynamic code from a Discount. */
  DeleteDiscountsDiscountDynamicCodesCode: {
    parameters: {
      path: {
        /** The id of the Discount */
        id: string;
        /** The id of the Discount */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Retrieves a Discount by its discount code */
  GetDiscountsDiscountCode: {
    parameters: {
      path: {
        /** The code of the Discount */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            discount?: components["schemas"]["discount"];
          };
        };
      };
    };
  };
  /** Retrieves an list of Draft Orders */
  GetDraftOrders: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
  };
  /** Creates a Draft Order */
  PostDraftOrders: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The status of the draft order */
          status?: string;
          /** @description The email of the customer of the draft order */
          email: string;
          /** @description The Address to be used for billing purposes. */
          billing_address?: Partial<components["schemas"]["address"]>;
          /** @description The Address to be used for shipping. */
          shipping_address?: Partial<components["schemas"]["address"]>;
          /** @description The Line Items that have been received. */
          items: {
            /** @description The id of the Product Variant to generate the Line Item from. */
            variant_id?: string;
            /** @description The potential custom price of the item. */
            unit_price?: number;
            /** @description The potential custom title of the item. */
            title?: string;
            /** @description The quantity of the Line Item. */
            quantity?: number;
            /** @description The optional key-value map with additional details about the Line Item. */
            metadata?: { [key: string]: unknown };
          }[];
          /** @description The id of the region for the draft order */
          region_id: string;
          /** @description The discounts to add on the draft order */
          discounts?: {
            /** @description The code of the discount to apply */
            code?: string;
          }[];
          /** @description The id of the customer to add on the draft order */
          customer_id?: string;
          /** @description An optional flag passed to the resulting order to determine use of notifications. */
          no_notification_order?: boolean;
          /** @description The shipping methods for the draft order */
          shipping_methods: {
            /** @description The id of the shipping option in use */
            option_id?: string;
            /** @description The optional additional data needed for the shipping method */
            data?: { [key: string]: unknown };
            /** @description The potential custom price of the shipping */
            price?: number;
          }[];
          /** @description The optional key-value map with additional details about the Draft Order. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Creates a Line Item for the Draft Order */
  PostDraftOrdersDraftOrderLineItems: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Product Variant to generate the Line Item from. */
          variant_id?: string;
          /** @description The potential custom price of the item. */
          unit_price?: number;
          /** @description The potential custom title of the item. */
          title?: string;
          /** @description The quantity of the Line Item. */
          quantity?: number;
          /** @description The optional key-value map with additional details about the Line Item. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Draft Order. */
  GetDraftOrdersDraftOrder: {
    parameters: {
      path: {
        /** The id of the Draft Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
  };
  /** Deletes a Draft Order */
  DeleteDraftOrdersDraftOrder: {
    parameters: {
      path: {
        /** The id of the Draft Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Draft Order. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Updates a Line Item for a Draft Order */
  PostDraftOrdersDraftOrderLineItemsItem: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The potential custom price of the item. */
          unit_price?: number;
          /** @description The potential custom title of the item. */
          title?: string;
          /** @description The quantity of the Line Item. */
          quantity?: number;
          /** @description The optional key-value map with additional details about the Line Item. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Removes a Line Item from a Draft Order. */
  DeleteDraftOrdersDraftOrderLineItemsItem: {
    parameters: {
      path: {
        /** The id of the Draft Order. */
        id: string;
        /** The id of the Draft Order. */
        line_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
  };
  /** Registers a payment for a Draft Order. */
  PostDraftOrdersDraftOrderRegisterPayment: {
    parameters: {
      path: {
        /** The Draft Order id. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
  };
  /** Updates a Draft Order. */
  PostDraftOrdersDraftOrder: {
    parameters: {
      path: {
        /** The id of the Draft Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            draft_order?: components["schemas"]["draft-order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Region to create the Draft Order in. */
          region_id?: string;
          /** @description An email to be used on the Draft Order. */
          email?: string;
          /** @description The Address to be used for billing purposes. */
          billing_address?: Partial<components["schemas"]["address"]>;
          /** @description The Address to be used for shipping. */
          shipping_address?: Partial<components["schemas"]["address"]>;
          /** @description An array of Discount codes to add to the Draft Order. */
          discounts?: {
            /** @description The code that a Discount is identifed by. */
            code?: string;
          }[];
          /** @description An optional flag passed to the resulting order to determine use of notifications. */
          no_notification_order?: boolean;
          /** @description The id of the Customer to associate the Draft Order with. */
          customer_id?: string;
        };
      };
    };
  };
  /** Retrieves a list of Gift Cards. */
  GetGiftCards: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            gift_cards?: components["schemas"]["gift_card"][];
          };
        };
      };
    };
  };
  /** Creates a Gift Card that can redeemed by its unique code. The Gift Card is only valid within 1 region. */
  PostGiftCards: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            gift_card?: components["schemas"]["gift_card"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The value (excluding VAT) that the Gift Card should represent. */
          value?: number;
          /** @description Whether the Gift Card is disabled on creation. You will have to enable it later to make it available to Customers. */
          is_disabled?: boolean;
          /**
           * Format: date-time
           * @description The time at which the Gift Card should no longer be available.
           */
          ends_at?: string;
          /** @description The id of the Region in which the Gift Card can be used. */
          region_id?: string[];
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Gift Card. */
  GetGiftCardsGiftCard: {
    parameters: {
      path: {
        /** The id of the Gift Card. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            gift_card?: components["schemas"]["gift_card"];
          };
        };
      };
    };
  };
  /** Creates a Gift Card that can redeemed by its unique code. The Gift Card is only valid within 1 region. */
  PostGiftCardsGiftCard: {
    parameters: {
      path: {
        /** The id of the Gift Card. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            gift_card?: components["schemas"]["gift_card"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The value (excluding VAT) that the Gift Card should represent. */
          balance?: number;
          /** @description Whether the Gift Card is disabled on creation. You will have to enable it later to make it available to Customers. */
          is_disabled?: boolean;
          /**
           * Format: date-time
           * @description The time at which the Gift Card should no longer be available.
           */
          ends_at?: string;
          /** @description The id of the Region in which the Gift Card can be used. */
          region_id?: string[];
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a Gift Card */
  DeleteGiftCardsGiftCard: {
    parameters: {
      path: {
        /** The id of the Gift Card to delete. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Gift Card */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Accepts an Invite and creates a corresponding user */
  PostInvitesInviteAccept: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The invite token provided by the admin. */
          token: string;
          /** @description The User to create. */
          user: {
            /** @description the first name of the User */
            first_name: string;
            /** @description the last name of the User */
            last_name: string;
            /** @description The desired password for the User */
            password: string;
          };
        };
      };
    };
  };
  /** Lists all Invites */
  GetInvites: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            invites?: components["schemas"]["invite"][];
          };
        };
      };
    };
  };
  /** Creates an Invite and triggers an 'invite' created event */
  PostInvites: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The email for the user to be created. */
          user: string;
          /** @description The role of the user to be created. */
          role: string;
        };
      };
    };
  };
  /** Creates an Invite and triggers an 'invite' created event */
  DeleteInvitesInvite: {
    parameters: {
      path: {
        /** The id of the Invite */
        invite_id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Resends an Invite by triggering the 'invite' created event again */
  PostInvitesInviteResend: {
    parameters: {
      path: {
        /** The id of the Invite */
        invite_id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Retrieves a list of notes */
  GetNotes: {
    parameters: {
      path: {
        /** The number of notes to get */
        limit: number;
        /** The offset at which to get notes */
        offset: number;
        /** The id which the notes belongs to */
        resource_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            notes?: components["schemas"]["note"][];
          };
        };
      };
    };
  };
  /** Creates a Note which can be associated with any resource as required. */
  PostNotes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            note?: components["schemas"]["note"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the resource which the Note relates to. */
          resource_id?: string;
          /** @description The type of resource which the Note relates to. */
          resource_type?: string;
          /** @description The content of the Note to create. */
          value?: string;
        };
      };
    };
  };
  /** Retrieves a single note using its id */
  GetNotesNote: {
    parameters: {
      path: {
        /** The id of the note to retrieve. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            note?: components["schemas"]["note"];
          };
        };
      };
    };
  };
  /** Updates a Note associated with some resource */
  PostNotesNote: {
    parameters: {
      path: {
        /** The id of the Note to update */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            note?: components["schemas"]["note"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The updated description of the Note. */
          value: string;
        };
      };
    };
  };
  /** Deletes a Note. */
  DeleteNotesNote: {
    parameters: {
      path: {
        /** The id of the Note to delete. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Note. */
            id?: string;
            /** @description Whether or not the Note was deleted. */
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a list of Notifications. */
  GetNotifications: {
    parameters: {
      query: {
        /** The number of notifications to skip before starting to collect the notifications set */
        offset?: number;
        /** The number of notifications to return */
        limit?: number;
        /** The fields to include in the result set */
        fields?: string;
        /** The fields to populate */
        expand?: string;
        event_name?: string;
        resource_type?: string;
        resource_id?: string;
        to?: string;
        /** Whether the result set should include resent notifications or not */
        include_resends?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            notifications?: components["schemas"]["notification"][];
          };
        };
      };
    };
  };
  /** Resends a previously sent notifications, with the same data but optionally to a different address */
  PostNotificationsNotificationResend: {
    parameters: {
      path: {
        /** The id of the Notification */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            notification?: components["schemas"]["notification"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The address or user identifier that the Notification was sent to */
          to?: string;
        };
      };
    };
  };
  /** Adds a Shipping Method to an Order. If another Shipping Method exists with the same Shipping Profile, the previous Shipping Method will be replaced. */
  PostOrdersOrderShippingMethods: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The price (excluding VAT) that should be charged for the Shipping Method */
          price: number;
          /** @description The id of the Shipping Option to create the Shipping Method from. */
          option_id: string;
          /** @description The data required for the Shipping Option to create a Shipping Method. This will depend on the Fulfillment Provider. */
          data: { [key: string]: unknown };
        };
      };
    };
  };
  /** Archives the order with the given id. */
  PostOrdersOrderArchive: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Cancels a Claim */
  PostOrdersClaimCancel: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Claim. */
        claim_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["claim_order"];
          };
        };
      };
    };
  };
  /** Registers a Fulfillment as canceled. */
  PostOrdersClaimFulfillmentsCancel: {
    parameters: {
      path: {
        /** The id of the Order which the Claim relates to. */
        id: string;
        /** The id of the Claim which the Fulfillment relates to. */
        claim_id: string;
        /** The id of the Fulfillment. */
        fulfillment_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            fulfillment?: components["schemas"]["fulfillment"];
          };
        };
      };
    };
  };
  /** Registers a Fulfillment as canceled. */
  PostOrdersSwapFulfillmentsCancel: {
    parameters: {
      path: {
        /** The id of the Order which the Swap relates to. */
        id: string;
        /** The id of the Swap which the Fulfillment relates to. */
        swap_id: string;
        /** The id of the Fulfillment. */
        fulfillment_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            fulfillment?: components["schemas"]["fulfillment"];
          };
        };
      };
    };
  };
  /** Registers a Fulfillment as canceled. */
  PostOrdersOrderFulfillmentsCancel: {
    parameters: {
      path: {
        /** The id of the Order which the Fulfillment relates to. */
        id: string;
        /** The id of the Fulfillment */
        fulfillment_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            fulfillment?: components["schemas"]["fulfillment"];
          };
        };
      };
    };
  };
  /** Registers an Order as canceled. This triggers a flow that will cancel any created Fulfillments and Payments, may fail if the Payment or Fulfillment Provider is unable to cancel the Payment/Fulfillment. */
  PostOrdersOrderCancel: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Cancels a Swap */
  PostOrdersSwapCancel: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Swap. */
        swap_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["swap"];
          };
        };
      };
    };
  };
  /** Captures all the Payments associated with an Order. */
  PostOrdersOrderCapture: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Completes an Order */
  PostOrdersOrderComplete: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Registers a Claim Fulfillment as shipped. */
  PostOrdersOrderClaimsClaimShipments: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Claim. */
        claim_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Fulfillment. */
          fulfillment_id: string;
          /** @description The tracking numbers for the shipment. */
          tracking_numbers?: string[];
        };
      };
    };
  };
  /** Creates a Claim. */
  PostOrdersOrderClaims: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The type of the Claim. This will determine how the Claim is treated: `replace` Claims will result in a Fulfillment with new items being created, while a `refund` Claim will refund the amount paid for the claimed items.
           * @enum {string}
           */
          type: "replace" | "refund";
          /** @description The Claim Items that the Claim will consist of. */
          claim_items: {
            /** @description The id of the Line Item that will be claimed. */
            item_id?: string;
            /** @description The number of items that will be returned */
            quantity?: number;
            /** @description Short text describing the Claim Item in further detail. */
            note?: string;
            /**
             * @description The reason for the Claim
             * @enum {string}
             */
            reason?:
              | "missing_item"
              | "wrong_item"
              | "production_failure"
              | "other";
            /** @description A list o tags to add to the Claim Item */
            tags?: string[];
            /** @description A list of image URL's that will be associated with the Claim */
            images?: string[];
          }[];
          /** @description Optional details for the Return Shipping Method, if the items are to be sent back. */
          return_shipping?: {
            /** @description The id of the Shipping Option to create the Shipping Method from. */
            option_id?: string;
            /** @description The price to charge for the Shipping Method. */
            price?: number;
          };
          /** @description The new items to send to the Customer when the Claim type is Replace. */
          additional_items?: {
            /** @description The id of the Product Variant to ship. */
            variant_id?: string;
            /** @description The quantity of the Product Variant to ship. */
            quantity?: number;
          }[];
          /** @description The Shipping Methods to send the additional Line Items with. */
          shipping_methods?: {
            /** @description The id of an existing Shipping Method */
            id?: string;
            /** @description The id of the Shipping Option to create a Shipping Method from */
            option_id?: string;
            /** @description The price to charge for the Shipping Method */
            price?: number;
          }[];
          /** @description An optional shipping address to send the claim to. Defaults to the parent order's shipping address */
          shipping_address?: { [key: string]: unknown };
          /** @description The amount to refund the Customer when the Claim type is `refund`. */
          refund_amount?: number;
          /** @description If set to true no notification will be send related to this Claim. */
          no_notification?: boolean;
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Creates a Fulfillment of an Order - will notify Fulfillment Providers to prepare a shipment. */
  PostOrdersOrderFulfillments: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Line Items to include in the Fulfillment. */
          items: {
            /** @description The id of Line Item to fulfill. */
            item_id?: string;
            /** @description The quantity of the Line Item to fulfill. */
            quantity?: number;
          }[];
          /** @description If set to true no notification will be send related to this Swap. */
          no_notification?: boolean;
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a list of Orders */
  GetOrders: {
    parameters: {
      query: {
        /** Query used for searching orders. */
        q?: string;
        /** Id of the order to search for. */
        id?: string;
        /** Status to search for. */
        status?: unknown;
        /** Fulfillment status to search for. */
        fulfillment_status?: unknown;
        /** Payment status to search for. */
        payment_status?: unknown;
        /** Display id to search for. */
        display_id?: string;
        /** to search for. */
        cart_id?: string;
        /** to search for. */
        customer_id?: string;
        /** to search for. */
        email?: string;
        /** to search for. */
        region_id?: string;
        /** to search for. */
        currency_code?: string;
        /** to search for. */
        tax_rate?: string;
        /** Date comparison for when resulting orders was cancelled, i.e. less than, greater than etc. */
        cancelled_at?: { [key: string]: unknown };
        /** Date comparison for when resulting orders was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting orders was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
        /** How many orders to skip in the result. */
        offset?: string;
        /** Limit the number of orders returned. */
        limit?: string;
        /** (Comma separated) Which fields should be expanded in each order of the result. */
        expand?: string;
        /** (Comma separated) Which fields should be included in each order of the result. */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            orders?: components["schemas"]["order"][];
          };
        };
      };
    };
  };
  /** Creates and order */
  PostOrders: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description status of the order */
          status?: string;
          /** @description the email for the order */
          email?: string;
          /** @description Billing address */
          billing_address?: Partial<components["schemas"]["address"]>;
          /** @description Shipping address */
          shipping_address?: Partial<components["schemas"]["address"]>;
          /** @description The Line Items for the order */
          items?: unknown[];
          /** @description Region where the order belongs */
          region?: string;
          /** @description Discounts applied to the order */
          discounts?: unknown[];
          /** @description id of the customer */
          customer_id?: string;
          /** @description payment method chosen for the order */
          payment_method?: {
            /** @description id of the payment provider */
            provider_id: string;
            /** @description Data relevant for the given payment method */
            data?: { [key: string]: unknown };
          };
          /** @description The Shipping Method used for shipping the order. */
          shipping_method?: {
            /** @description The id of the shipping provider. */
            provider_id: string;
            /** @description The id of the shipping profile. */
            profile_id: string;
            /** @description The price of the shipping. */
            price: number;
            /** @description Data relevant to the specific shipping method. */
            data?: { [key: string]: unknown };
            /** @description Items to ship */
            items?: unknown[];
          };
          /** @description A flag to indicate if no notifications should be emitted related to the updated order. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** Registers a Fulfillment as shipped. */
  PostOrdersOrderShipment: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Fulfillment. */
          fulfillment_id: string;
          /** @description The tracking numbers for the shipment. */
          tracking_numbers?: string[];
          /** @description If set to true no notification will be send related to this Shipment. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** Registers a Swap Fulfillment as shipped. */
  PostOrdersOrderSwapsSwapShipments: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Swap. */
        swap_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Fulfillment. */
          fulfillment_id: string;
          /** @description The tracking numbers for the shipment. */
          tracking_numbers?: string[];
          /** @description If set to true no notification will be send related to this Claim. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** Creates a Swap. Swaps are used to handle Return of previously purchased goods and Fulfillment of replacements simultaneously. */
  PostOrdersOrderSwaps: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Line Items to return as part of the Swap. */
          return_items: {
            /** @description The id of the Line Item that will be claimed. */
            item_id: string;
            /** @description The number of items that will be returned */
            quantity: number;
          }[];
          /** @description How the Swap will be returned. */
          return_shipping?: {
            /** @description The id of the Shipping Option to create the Shipping Method from. */
            option_id?: string;
            /** @description The price to charge for the Shipping Method. */
            price?: number;
          };
          /** @description The new items to send to the Customer. */
          additional_items?: {
            /** @description The id of the Product Variant to ship. */
            variant_id: string;
            /** @description The quantity of the Product Variant to ship. */
            quantity: number;
          }[];
          /** @description The custom shipping options to potentially create a Shipping Method from. */
          custom_shipping_options?: {
            /** @description The id of the Shipping Option to override with a custom price. */
            option_id: string;
            /** @description The custom price of the Shipping Option. */
            price: number;
          }[];
          /** @description If set to true no notification will be send related to this Swap. */
          no_notification?: boolean;
          /** @description If true, swaps can be completed with items out of stock */
          allow_backorder?: boolean;
        };
      };
    };
  };
  /** Deletes a metadata key. */
  DeleteOrdersOrderMetadataKey: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The metadata key. */
        key: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Creates a Fulfillment for a Claim. */
  PostOrdersOrderClaimsClaimFulfillments: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Claim. */
        claim_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
          /** @description If set to true no notification will be send related to this Claim. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** Creates a Fulfillment for a Swap. */
  PostOrdersOrderSwapsSwapFulfillments: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Swap. */
        swap_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
          /** @description If set to true no notification will be send related to this Claim. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** Retrieves an Order */
  GetOrdersOrder: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Updates and order */
  PostOrdersOrder: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description the email for the order */
          email?: string;
          /** @description Billing address */
          billing_address?: Partial<
            components["schemas"]["address shipping_address: description: Shipping address anyOf: - $ref:"]
          >;
          /** @description The Line Items for the order */
          items?: unknown[];
          /** @description Region where the order belongs */
          region?: string;
          /** @description Discounts applied to the order */
          discounts?: unknown[];
          /** @description id of the customer */
          customer_id?: string;
          payment_method?: {
            /** @description id of the payment provider */
            provider_id?: string;
            /** @description Data relevant for the given payment method */
            data?: { [key: string]: unknown };
          };
          /** @description The Shipping Method used for shipping the order. */
          shipping_method?: {
            /** @description The id of the shipping provider. */
            provider_id?: string;
            /** @description The id of the shipping profile. */
            profile_id?: string;
            /** @description The price of the shipping. */
            price?: number;
            /** @description Data relevant to the specific shipping method. */
            data?: { [key: string]: unknown };
            /** @description Items to ship */
            items?: unknown[];
          };
          /** @description A flag to indicate if no notifications should be emitted related to the updated order. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** When there are differences between the returned and shipped Products in a Swap, the difference must be processed. Either a Refund will be issued or a Payment will be captured. */
  PostOrdersOrderSwapsSwapProcessPayment: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Swap. */
        swap_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Issues a Refund. */
  PostOrdersOrderRefunds: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The amount to refund. */
          amount: number;
          /** @description The reason for the Refund. */
          reason: string;
          /** @description A not with additional details about the Refund. */
          note?: string;
          /** @description If set to true no notification will be send related to this Refund. */
          no_notification?: boolean;
        };
      };
    };
  };
  /** Requests a Return. If applicable a return label will be created and other plugins notified. */
  PostOrdersOrderReturns: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Line Items that will be returned. */
          items: {
            /** @description The id of the Line Item. */
            item_id?: string;
            /** @description The id of the Return Reason to use. */
            reason_id?: string;
            /** @description An optional note with information about the Return. */
            note?: string;
            /** @description The quantity of the Line Item. */
            quantity?: number;
          }[];
          /** @description The Shipping Method to be used to handle the return shipment. */
          return_shipping?: {
            /** @description The id of the Shipping Option to create the Shipping Method from. */
            option_id?: string;
            /** @description The price to charge for the Shipping Method. */
            price?: number;
          };
          /** @description A flag to indicate if the Return should be registerd as received immediately. */
          receive_now?: boolean;
          /** @description A flag to indicate if no notifications should be emitted related to the requested Return. */
          no_notification?: boolean;
          /** @description The amount to refund. */
          refund?: number;
        };
      };
    };
  };
  /** Updates a Claim. */
  PostOrdersOrderClaimsClaim: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
        /** The id of the Claim. */
        claim_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Claim Items that the Claim will consist of. */
          claim_items?: {
            /** @description The id of the Claim Item. */
            id?: string;
            /** @description The id of the Line Item that will be claimed. */
            item_id?: string;
            /** @description The number of items that will be returned */
            quantity?: number;
            /** @description Short text describing the Claim Item in further detail. */
            note?: string;
            /**
             * @description The reason for the Claim
             * @enum {string}
             */
            reason?:
              | "missing_item"
              | "wrong_item"
              | "production_failure"
              | "other";
            /** @description A list o tags to add to the Claim Item */
            tags?: string[];
            /** @description A list of image URL's that will be associated with the Claim */
            images?: string[];
          }[];
          /** @description The Shipping Methods to send the additional Line Items with. */
          shipping_methods?: {
            /** @description The id of an existing Shipping Method */
            id?: string;
            /** @description The id of the Shipping Option to create a Shipping Method from */
            option_id?: string;
            /** @description The price to charge for the Shipping Method */
            price?: number;
          }[];
          /** @description If set to true no notification will be send related to this Swap. */
          no_notification?: boolean;
          /** @description An optional set of key-value pairs to hold additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieve a list of Product Tags. */
  GetProductTags: {
    parameters: {
      query: {
        /** The number of tags to return. */
        limit?: string;
        /** The offset of tags to return. */
        offset?: string;
        /** The value of tags to return. */
        value?: string;
        /** The id of tags to return. */
        id?: string;
        /** Date comparison for when resulting tas was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting tas was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tags?: components["schemas"]["product_tag"];
          };
        };
      };
    };
  };
  /** Retrieve a list of Product Types. */
  GetProductTypes: {
    parameters: {
      query: {
        /** The number of types to return. */
        limit?: string;
        /** The offset of types to return. */
        offset?: string;
        /** The value of types to return. */
        value?: string;
        /** The id of types to return. */
        id?: string;
        /** Date comparison for when resulting tas was created, i.e. less than, greater than etc. */
        created_at?: unknown;
        /** Date comparison for when resulting tas was updated, i.e. less than, greater than etc. */
        updated_at?: unknown;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            types?: components["schemas"]["product_tag"];
          };
        };
      };
    };
  };
  /** Adds a Country to the list of Countries in a Region */
  PostRegionsRegionCountries: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The 2 character ISO code for the Country. */
          country_code: string;
        };
      };
    };
  };
  /** Adds a Fulfillment Provider to a Region */
  PostRegionsRegionFulfillmentProviders: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Fulfillment Provider to add. */
          provider_id?: string;
        };
      };
    };
  };
  /** Adds a Payment Provider to a Region */
  PostRegionsRegionPaymentProviders: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Payment Provider to add. */
          provider_id?: string;
        };
      };
    };
  };
  /** Retrieves a list of Regions. */
  GetRegions: {
    parameters: {
      query: {
        /** limit the number of regions in response */
        limit?: number;
        /** Offset of regions in response (used for pagination) */
        offset?: number;
        /** Date comparison for when resulting region was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting region was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
        /** Date comparison for when resulting region was deleted, i.e. less than, greater than etc. */
        deleted_at?: { [key: string]: unknown };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            regions?: components["schemas"]["region"][];
          };
        };
      };
    };
  };
  /** Creates a Region */
  PostRegions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Region */
          name?: string;
          /** @description The 3 character ISO currency code to use for the Region. */
          currency_code?: string;
          /** @description An optional tax code the Region. */
          tax_code?: string;
          /** @description The tax rate to use on Orders in the Region. */
          tax_rate?: number;
          /** @description A list of Payment Providers that should be enabled for the Region */
          payment_providers?: string[];
          /** @description A list of Fulfillment Providers that should be enabled for the Region */
          fulfillment_providers?: string[];
          /** @description A list of countries that should be included in the Region. */
          countries?: string[];
        };
      };
    };
  };
  /** Deletes a metadata key. */
  DeleteRegionsRegionMetadataKey: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
        /** The metadata key. */
        key: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Retrieves a Region. */
  GetRegionsRegion: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Updates a Region */
  PostRegionsRegion: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Region */
          name?: string;
          /** @description The 3 character ISO currency code to use for the Region. */
          currency_code?: string;
          /** @description If true Medusa will automatically calculate taxes for carts in this region. If false you have to manually call POST /carts/:id/taxes. */
          automatic_taxes?: boolean;
          /** @description Whether gift cards in this region should be applied sales tax when purchasing a gift card */
          gift_cards_taxable?: boolean;
          /** @description The id of the tax provider to use; if null the system tax provider is used */
          tax_provider_id?: string;
          /** @description An optional tax code the Region. */
          tax_code?: string;
          /** @description The tax rate to use on Orders in the Region. */
          tax_rate?: number;
          /** @description A list of Payment Providers that should be enabled for the Region */
          payment_providers?: string[];
          /** @description A list of Fulfillment Providers that should be enabled for the Region */
          fulfillment_providers?: string[];
          /** @description A list of countries that should be included in the Region. */
          countries?: string[];
        };
      };
    };
  };
  /** Deletes a Region. */
  DeleteRegionsRegion: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Region. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Gathers all the fulfillment options available to in the Region. */
  GetRegionsRegionFulfillmentOptions: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            fulfillment_options?: { [key: string]: unknown }[];
          };
        };
      };
    };
  };
  /** Removes a Country from the list of Countries in a Region */
  PostRegionsRegionCountriesCountry: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
        /** The 2 character ISO code for the Country. */
        country_code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Removes a Fulfillment Provider. */
  PostRegionsRegionFulfillmentProvidersProvider: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
        /** The id of the Fulfillment Provider. */
        provider_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Removes a Payment Provider. */
  PostRegionsRegionPaymentProvidersProvider: {
    parameters: {
      path: {
        /** The id of the Region. */
        region_id: string;
        /** The id of the Payment Provider. */
        provider_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Sets the metadata of a Region */
  PostRegionsRegionMetadata: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Key for the metadata value. */
          key: string;
          /** @description The value that the key relates to. */
          value: string;
        };
      };
    };
  };
  /** Adds a Product Option to a Product */
  PostProductsProductOptions: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title the Product Option will be identified by i.e. "Size" */
          title: string;
        };
      };
    };
  };
  /** Retrieves a list of Product */
  GetProducts: {
    parameters: {
      query: {
        /** Query used for searching products. */
        q?: string;
        /** Id of the product to search for. */
        id?: string;
        /** Status to search for. */
        status?: unknown[];
        /** Collection ids to search for. */
        collection_id?: unknown[];
        /** Tags to search for. */
        tags?: unknown[];
        /** to search for. */
        title?: string;
        /** to search for. */
        description?: string;
        /** to search for. */
        handle?: string;
        /** Search for giftcards using is_giftcard=true. */
        is_giftcard?: string;
        /** to search for. */
        type?: string;
        /** to retrieve products in. */
        order?: string;
        /** Date comparison for when resulting products was deleted, i.e. less than, greater than etc. */
        deleted_at?: { [key: string]: unknown };
        /** Date comparison for when resulting products was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting products was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
        /** How many products to skip in the result. */
        offset?: string;
        /** Limit the number of products returned. */
        limit?: string;
        /** (Comma separated) Which fields should be expanded in each product of the result. */
        expand?: string;
        /** (Comma separated) Which fields should be included in each product of the result. */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The number of Products. */
            count?: number;
            /** @description The offset of the Product query. */
            offset?: number;
            /** @description The limit of the Product query. */
            limit?: number;
            products?: components["schemas"]["product"][];
          };
        };
      };
    };
  };
  /** Creates a Product */
  PostProducts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title of the Product */
          title: string;
          /** @description The subtitle of the Product */
          subtitle?: string;
          /** @description A description of the Product. */
          description?: string;
          /** @description A flag to indicate if the Product represents a Gift Card. Purchasing Products with this flag set to `true` will result in a Gift Card being created. */
          is_giftcard?: boolean;
          /** @description A flag to indicate if discounts can be applied to the LineItems generated from this Product */
          discountable?: boolean;
          /** @description Images of the Product. */
          images?: string[];
          /** @description The thumbnail to use for the Product. */
          thumbnail?: string;
          /** @description A unique handle to identify the Product by. */
          handle?: string;
          /** @description The Product Type to associate the Product with. */
          type?: {
            /** @description The value of the Product Type. */
            value?: string;
          };
          /** @description The id of the Collection the Product should belong to. */
          collection_id?: string;
          /** @description Tags to associate the Product with. */
          tags?: {
            /** @description The id of an existing Tag. */
            id?: string;
            /** @description The value of the Tag, these will be upserted. */
            value?: string;
          }[];
          /** @description The Options that the Product should have. These define on which properties the Product's Product Variants will differ. */
          options?: {
            /** @description The title to identify the Product Option by. */
            title?: string;
          }[];
          /** @description A list of Product Variants to create with the Product. */
          variants?: {
            /** @description The title to identify the Product Variant by. */
            title?: string;
            /** @description The unique SKU for the Product Variant. */
            sku?: string;
            /** @description The EAN number of the item. */
            ean?: string;
            /** @description The UPC number of the item. */
            upc?: string;
            /** @description A generic GTIN field for the Product Variant. */
            barcode?: string;
            /** @description The Harmonized System code for the Product Variant. */
            hs_code?: string;
            /** @description The amount of stock kept for the Product Variant. */
            inventory_quantity?: number;
            /** @description Whether the Product Variant can be purchased when out of stock. */
            allow_backorder?: boolean;
            /** @description Whether Medusa should keep track of the inventory for this Product Variant. */
            manage_inventory?: boolean;
            /** @description The wieght of the Product Variant. */
            weight?: string;
            /** @description The length of the Product Variant. */
            length?: string;
            /** @description The height of the Product Variant. */
            height?: string;
            /** @description The width of the Product Variant. */
            width?: string;
            /** @description The country of origin of the Product Variant. */
            origin_country?: string;
            /** @description The Manufacturer Identification code for the Product Variant. */
            mid_code?: string;
            /** @description The material composition of the Product Variant. */
            material?: string;
            /** @description An optional set of key-value pairs with additional information. */
            metadata?: { [key: string]: unknown };
            prices?: {
              /** @description The id of the Region for which the price is used. */
              region_id?: string;
              /** @description The 3 character ISO currency code for which the price will be used. */
              currency_code?: string;
              /** @description The amount to charge for the Product Variant. */
              amount?: number;
              /** @description The sale amount to charge for the Product Variant. */
              sale_amount?: number;
            }[];
            options?: {
              /** @description The value to give for the Product Option at the same index in the Product's `options` field. */
              value?: string;
            }[];
          }[];
          /** @description The wieght of the Product. */
          weight?: string;
          /** @description The length of the Product. */
          length?: string;
          /** @description The height of the Product. */
          height?: string;
          /** @description The width of the Product. */
          width?: string;
          /** @description The country of origin of the Product. */
          origin_country?: string;
          /** @description The Manufacturer Identification code for the Product. */
          mid_code?: string;
          /** @description The material composition of the Product. */
          material?: string;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a list of the Product Variants associated with a Product. */
  GetProductsProductVariants: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            variants?: components["schemas"]["product_variant"][];
          };
        };
      };
    };
  };
  /** Creates a Product Variant. Each Product Variant must have a unique combination of Product Option Values. */
  PostProductsProductVariants: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title to identify the Product Variant by. */
          title: string;
          /** @description The unique SKU for the Product Variant. */
          sku?: string;
          /** @description The EAN number of the item. */
          ean?: string;
          /** @description The UPC number of the item. */
          upc?: string;
          /** @description A generic GTIN field for the Product Variant. */
          barcode?: string;
          /** @description The Harmonized System code for the Product Variant. */
          hs_code?: string;
          /** @description The amount of stock kept for the Product Variant. */
          inventory_quantity?: number;
          /** @description Whether the Product Variant can be purchased when out of stock. */
          allow_backorder?: boolean;
          /** @description Whether Medusa should keep track of the inventory for this Product Variant. */
          manage_inventory?: boolean;
          /** @description The wieght of the Product Variant. */
          weight?: string;
          /** @description The length of the Product Variant. */
          length?: string;
          /** @description The height of the Product Variant. */
          height?: string;
          /** @description The width of the Product Variant. */
          width?: string;
          /** @description The country of origin of the Product Variant. */
          origin_country?: string;
          /** @description The Manufacturer Identification code for the Product Variant. */
          mid_code?: string;
          /** @description The material composition of the Product Variant. */
          material?: string;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
          prices: {
            /** @description The id of the Region for which the price is used. */
            region_id?: string;
            /** @description The 3 character ISO currency code for which the price will be used. */
            currency_code?: string;
            /** @description The amount to charge for the Product Variant. */
            amount?: number;
            /** @description The sale amount to charge for the Product Variant. */
            sale_amount?: number;
          }[];
          options: {
            /** @description The id of the Product Option to set the value for. */
            option_id?: string;
            /** @description The value to give for the Product Option. */
            value?: string;
          }[];
        };
      };
    };
  };
  /** Updates a Product Option */
  PostProductsProductOptionsOption: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
        /** The id of the Product Option. */
        option_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title of the Product Option */
          title?: string;
        };
      };
    };
  };
  /** Deletes a Product Option. Before a Product Option can be deleted all Option Values for the Product Option must be the same. You may, for example, have to delete some of your variants prior to deleting the Product Option */
  DeleteProductsProductOptionsOption: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
        /** The id of the Product Option. */
        option_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Product Option */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
            product?: components["schemas"]["product"];
          };
        };
      };
    };
  };
  /** Retrieves a Product. */
  GetProductsProduct: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
  };
  /** Updates a Product */
  PostProductsProduct: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title of the Product */
          title?: string;
          /** @description The subtitle of the Product */
          subtitle?: string;
          /** @description A description of the Product. */
          description?: string;
          /** @description A flag to indicate if the Product represents a Gift Card. Purchasing Products with this flag set to `true` will result in a Gift Card being created. */
          is_giftcard?: boolean;
          /** @description A flag to indicate if discounts can be applied to the LineItems generated from this Product */
          discountable?: boolean;
          /** @description Images of the Product. */
          images?: string[];
          /** @description The thumbnail to use for the Product. */
          thumbnail?: string;
          /** @description A unique handle to identify the Product by. */
          handle?: string;
          /** @description The Product Type to associate the Product with. */
          type?: {
            /** @description The value of the Product Type. */
            value?: string;
          };
          /** @description The id of the Collection the Product should belong to. */
          collection_id?: string;
          /** @description Tags to associate the Product with. */
          tags?: {
            /** @description The id of an existing Tag. */
            id?: string;
            /** @description The value of the Tag, these will be upserted. */
            value?: string;
          }[];
          /** @description The Options that the Product should have. These define on which properties the Product's Product Variants will differ. */
          options?: {
            /** @description The title to identify the Product Option by. */
            title?: string;
          }[];
          /** @description A list of Product Variants to create with the Product. */
          variants?: {
            /** @description The title to identify the Product Variant by. */
            title?: string;
            /** @description The unique SKU for the Product Variant. */
            sku?: string;
            /** @description The EAN number of the item. */
            ean?: string;
            /** @description The UPC number of the item. */
            upc?: string;
            /** @description A generic GTIN field for the Product Variant. */
            barcode?: string;
            /** @description The Harmonized System code for the Product Variant. */
            hs_code?: string;
            /** @description The amount of stock kept for the Product Variant. */
            inventory_quantity?: number;
            /** @description Whether the Product Variant can be purchased when out of stock. */
            allow_backorder?: boolean;
            /** @description Whether Medusa should keep track of the inventory for this Product Variant. */
            manage_inventory?: boolean;
            /** @description The wieght of the Product Variant. */
            weight?: string;
            /** @description The length of the Product Variant. */
            length?: string;
            /** @description The height of the Product Variant. */
            height?: string;
            /** @description The width of the Product Variant. */
            width?: string;
            /** @description The country of origin of the Product Variant. */
            origin_country?: string;
            /** @description The Manufacturer Identification code for the Product Variant. */
            mid_code?: string;
            /** @description The material composition of the Product Variant. */
            material?: string;
            /** @description An optional set of key-value pairs with additional information. */
            metadata?: { [key: string]: unknown };
            prices?: {
              /** @description The id of the Region for which the price is used. */
              region_id?: string;
              /** @description The 3 character ISO currency code for which the price will be used. */
              currency_code?: string;
              /** @description The amount to charge for the Product Variant. */
              amount?: number;
              /** @description The sale amount to charge for the Product Variant. */
              sale_amount?: number;
            }[];
            options?: {
              /** @description The value to give for the Product Option at the same index in the Product's `options` field. */
              value?: string;
            }[];
          }[];
          /** @description The wieght of the Product. */
          weight?: string;
          /** @description The length of the Product. */
          length?: string;
          /** @description The height of the Product. */
          height?: string;
          /** @description The width of the Product. */
          width?: string;
          /** @description The country of origin of the Product. */
          origin_country?: string;
          /** @description The Manufacturer Identification code for the Product. */
          mid_code?: string;
          /** @description The material composition of the Product. */
          material?: string;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a Product and it's associated Product Variants. */
  DeleteProductsProduct: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Product. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Update a Product Variant. */
  PostProductsProductVariantsVariant: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
        /** The id of the Product Variant. */
        variant_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The title to identify the Product Variant by. */
          title?: string;
          /** @description The unique SKU for the Product Variant. */
          sku?: string;
          /** @description The EAN number of the item. */
          ean?: string;
          /** @description The UPC number of the item. */
          upc?: string;
          /** @description A generic GTIN field for the Product Variant. */
          barcode?: string;
          /** @description The Harmonized System code for the Product Variant. */
          hs_code?: string;
          /** @description The amount of stock kept for the Product Variant. */
          inventory_quantity?: number;
          /** @description Whether the Product Variant can be purchased when out of stock. */
          allow_backorder?: boolean;
          /** @description Whether Medusa should keep track of the inventory for this Product Variant. */
          manage_inventory?: boolean;
          /** @description The wieght of the Product Variant. */
          weight?: string;
          /** @description The length of the Product Variant. */
          length?: string;
          /** @description The height of the Product Variant. */
          height?: string;
          /** @description The width of the Product Variant. */
          width?: string;
          /** @description The country of origin of the Product Variant. */
          origin_country?: string;
          /** @description The Manufacturer Identification code for the Product Variant. */
          mid_code?: string;
          /** @description The material composition of the Product Variant. */
          material?: string;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
          prices?: {
            /** @description The id of the Region for which the price is used. */
            region_id?: string;
            /** @description The 3 character ISO currency code for which the price will be used. */
            currency_code?: string;
            /** @description The amount to charge for the Product Variant. */
            amount?: number;
            /** @description The sale amount to charge for the Product Variant. */
            sale_amount?: number;
          }[];
          options?: {
            /** @description The id of the Product Option to set the value for. */
            option_id?: string;
            /** @description The value to give for the Product Option. */
            value?: string;
          }[];
        };
      };
    };
  };
  /** Deletes a Product Variant. */
  DeleteProductsProductVariantsVariant: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
        /** The id of the Product Variant. */
        variant_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Product Variant. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a list of Product Types. */
  GetProductsTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            types?: components["schemas"]["product_type"][];
          };
        };
      };
    };
  };
  /** Set metadata key/value pair for Product */
  PostProductsProductMetadata: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The metadata key */
          key: string;
          /** @description The metadata value */
          value: string;
        };
      };
    };
  };
  /** Retrieves a list of Return Reasons. */
  GetReturnReasons: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return_reasons?: components["schemas"]["return_reason"][];
          };
        };
      };
    };
  };
  /** Creates a Return Reason */
  PostReturnReasons: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return_reason?: components["schemas"]["return_reason"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The label to display to the Customer. */
          label: string;
          /** @description The value that the Return Reason will be identified by. Must be unique. */
          value: string;
          /** @description The id of the parent return reason. */
          parent_return_reason_id?: string;
          /** @description An optional description to for the Reason. */
          description?: string;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Return Reason. */
  GetReturnReasonsReason: {
    parameters: {
      path: {
        /** The id of the Return Reason. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return_reason?: components["schemas"]["return_reason"];
          };
        };
      };
    };
  };
  /** Updates a Return Reason */
  PostReturnReasonsReason: {
    parameters: {
      path: {
        /** The id of the Return Reason. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return_reason?: components["schemas"]["return_reason"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The label to display to the Customer. */
          label?: string;
          /** @description An optional description to for the Reason. */
          description?: string;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a return reason. */
  DeleteReturnReason: {
    parameters: {
      path: {
        /** The id of the return reason */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted return reason */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Registers a Return as canceled. */
  PostReturnsReturnCancel: {
    parameters: {
      path: {
        /** The id of the Return. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Returns */
  GetReturns: {
    parameters: {
      path: {
        /** The upper limit for the amount of responses returned. */
        limit: number;
        /** The offset of the list returned. */
        offset: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            returns?: components["schemas"]["return"][];
          };
        };
      };
    };
  };
  /** Registers a Return as received. Updates statuses on Orders and Swaps accordingly. */
  PostReturnsReturnReceive: {
    parameters: {
      path: {
        /** The id of the Return. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return?: components["schemas"]["return"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Line Items that have been received. */
          items: {
            /** @description The id of the Line Item. */
            item_id?: string;
            /** @description The quantity of the Line Item. */
            quantity?: number;
          }[];
          /** @description The amount to refund. */
          refund?: number;
        };
      };
    };
  };
  /** Retrieves a list of Shipping Options. */
  GetShippingOptions: {
    parameters: {
      path: {
        /** Region to fetch options from */
        region_id?: string;
        /** Flag for fetching return options */
        is_return?: boolean;
        /** Flag for fetching admin specific options */
        admin_only?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_options?: components["schemas"]["shipping_option"][];
          };
        };
      };
    };
  };
  /** Creates a Shipping Option */
  PostShippingOptions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_option?: components["schemas"]["shipping_option"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Shipping Option */
          name?: string;
          /** @description The id of the Region in which the Shipping Option will be available. */
          region_id?: string;
          /** @description The id of the Fulfillment Provider that handles the Shipping Option. */
          provider_id?: string;
          /** @description The id of the Shipping Profile to add the Shipping Option to. */
          profile_id?: number;
          /** @description The data needed for the Fulfillment Provider to handle shipping with this Shipping Option. */
          data?: { [key: string]: unknown };
          /**
           * @description The type of the Shipping Option price.
           * @enum {string}
           */
          price_type?: "flat_rate" | "calculated";
          /** @description The amount to charge for the Shipping Option. */
          amount?: number;
          /** @description The requirements that must be satisfied for the Shipping Option to be available. */
          requirements?: {
            /**
             * @description The type of the requirement
             * @enum {string}
             */
            type?: "max_subtotal" | "min_subtotal";
            /** @description The amount to compare with. */
            amount?: number;
          }[];
          /** @description Whether the Shipping Option defines a return shipment. */
          is_return?: boolean;
          /** @description If true, the option can be used for draft orders */
          admin_only?: boolean;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a Shipping Option. */
  GetShippingOptionsOption: {
    parameters: {
      path: {
        /** The id of the Shipping Option. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_option?: components["schemas"]["shipping_option"];
          };
        };
      };
    };
  };
  /** Updates a Shipping Option */
  PostShippingOptionsOption: {
    parameters: {
      path: {
        /** The id of the Shipping Option. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_option?: components["schemas"]["shipping_option"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Shipping Option */
          name?: string;
          /** @description The amount to charge for the Shipping Option. */
          amount?: number;
          /** @description If true, the option can be used for draft orders */
          admin_only?: boolean;
          /** @description An optional set of key-value pairs with additional information. */
          metadata?: { [key: string]: unknown };
          /** @description The requirements that must be satisfied for the Shipping Option to be available. */
          requirements?: {
            /**
             * @description The type of the requirement
             * @enum {string}
             */
            type?: "max_subtotal" | "min_subtotal";
            /** @description The amount to compare with. */
            amount?: number;
          }[];
        };
      };
    };
  };
  /** Deletes a Shipping Option. */
  DeleteShippingOptionsOption: {
    parameters: {
      path: {
        /** The id of the Shipping Option. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Shipping Option. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a list of Shipping Profile. */
  GetShippingProfiles: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_profiles?: components["schemas"]["shipping_profile"][];
          };
        };
      };
    };
  };
  /** Creates a Shipping Profile */
  PostShippingProfiles: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_profile?: components["schemas"]["shipping_profile"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Shipping Profile */
          name: string;
        };
      };
    };
  };
  /** Retrieves a Shipping Profile. */
  GetShippingProfilesProfile: {
    parameters: {
      path: {
        /** The id of the Shipping Profile. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_profile?: components["schemas"]["shipping_profile"];
          };
        };
      };
    };
  };
  /** Updates a Shipping Profile */
  PostShippingProfilesProfile: {
    parameters: {
      path: {
        /** The id of the Shipping Profile. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_profiles?: components["schemas"]["shipping_profile"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Shipping Profile */
          name?: string;
        };
      };
    };
  };
  /** Deletes a Shipping Profile. */
  DeleteShippingProfilesProfile: {
    parameters: {
      path: {
        /** The id of the Shipping Profile. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Shipping Profile. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Adds a Currency Code to the available currencies. */
  PostStoreCurrenciesCode: {
    parameters: {
      path: {
        /** The 3 character ISO currency code. */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            store?: components["schemas"]["store"];
          };
        };
      };
    };
  };
  /** Removes a Currency Code from the available currencies. */
  DeleteStoreCurrenciesCode: {
    parameters: {
      path: {
        /** The 3 character ISO currency code. */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            store?: components["schemas"]["store"];
          };
        };
      };
    };
  };
  /** Retrieves the Store details */
  GetStore: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            store?: components["schemas"]["store"];
          };
        };
      };
    };
  };
  /** Updates the Store details */
  PostStore: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            store?: components["schemas"]["store"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the Store */
          name?: string;
          /** @description A template for Swap links - use `{{cart_id}}` to insert the Swap Cart id */
          swap_link_template?: string;
          /** @description A template for payment links links - use `{{cart_id}}` to insert the Cart id */
          payment_link_template?: string;
          /** @description A template for invite links - use `{{invite_token}}` to insert the invite token */
          invite_link_template?: string;
          /** @description The default currency code for the Store. */
          default_currency_code?: string;
        };
      };
    };
  };
  /** Retrieves the configured Payment Providers */
  GetStorePaymentProviders: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            payment_providers?: components["schemas"]["store"][];
          };
        };
      };
    };
  };
  /** Retrieves the configured Tax Providers */
  GetStoreTaxProviders: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_providers?: components["schemas"]["store"][];
          };
        };
      };
    };
  };
  /** Retrieves a Swap. */
  GetSwapsSwap: {
    parameters: {
      path: {
        /** The id of the Swap. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            swap?: components["schemas"]["swap"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Swaps. */
  GetSwaps: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            swaps?: components["schemas"]["swap"][];
          };
        };
      };
    };
  };
  /** Associates a Tax Rate with a list of Product Types */
  PostTaxRatesTaxRateProductTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Removes a Tax Rate from a list of Product Types */
  DeleteTaxRatesTaxRateProductTypes: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Associates a Tax Rate with a list of Products */
  PostTaxRatesTaxRateProducts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Removes a Tax Rate from a list of Products */
  DeleteTaxRatesTaxRateProducts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Associates a Tax Rate with a list of Product Types */
  PostTaxRatesTaxRateShippingOptions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Removes a Tax Rate from a list of Product Types */
  DeleteTaxRatesTaxRateShippingOptions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Retrieves a list of TaxRates */
  GetTaxRates: {
    parameters: {
      query: {
        /** Query used for searching orders. */
        q?: string;
        /** Id of the order to search for. */
        id?: string;
        /** to search for. */
        region_id?: string;
        /** to search for. */
        code?: string;
        /** to search for. */
        rate?: string;
        /** Date comparison for when resulting orders was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting orders was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
        /** How many orders to skip in the result. */
        offset?: string;
        /** Limit the number of orders returned. */
        limit?: string;
        /** (Comma separated) Which fields should be included in each order of the result. */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            orders?: components["schemas"]["order"][];
          };
        };
      };
    };
  };
  /** Creates a Tax Rate */
  PostTaxRates: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Deletes a Tax Rate */
  DeleteTaxRatesTaxRate: {
    parameters: {
      path: {
        /** The id of the Shipping Option. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Shipping Option. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a TaxRate */
  GetTaxRatesTaxRate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Updates a Tax Rate */
  PostTaxRatesTaxRate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            tax_rate?: components["schemas"]["tax_rate"][];
          };
        };
      };
    };
  };
  /** Uploads an array of files to the specific fileservice that is installed in medusa. */
  PostUploads: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            "0"?: unknown;
            "1"?: unknown;
            "2"?: unknown;
            "3"?: unknown;
            "4"?: unknown;
            "5"?: unknown;
            "6"?: unknown;
          };
        };
      };
    };
  };
  /** Retrieves a list of Product Variants */
  GetVariants: {
    parameters: {
      query: {
        /** Query used for searching variants. */
        q?: string;
        /** How many variants to skip in the result. */
        offset?: string;
        /** Limit the number of variants returned. */
        limit?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            variants?: components["schemas"]["product_variant"][];
          };
        };
      };
    };
  };
  /** Retrieves all users. */
  GetUsers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            users?: components["schemas"]["user"][];
          };
        };
      };
    };
  };
  /** Creates a User */
  PostUsers: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            user?: components["schemas"]["user"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Users email. */
          email: string;
          /** @description The name of the User. */
          first_name?: string;
          /** @description The name of the User. */
          last_name?: string;
          /** @description Userrole assigned to the user. */
          role?: string;
          /** @description The Users password. */
          password: string;
        };
      };
    };
  };
  /** Updates a User */
  PostUsersUser: {
    parameters: {
      path: {
        /** The id of the User. */
        user_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            user?: components["schemas"]["user"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the User. */
          first_name?: string;
          /** @description The name of the User. */
          last_name?: string;
          /** @description The role of the User(admin, member, developer). */
          role?: string;
          /** @description The api_token of the User. */
          api_token?: string;
        };
      };
    };
  };
  /** Deletes a User */
  DeleteUsersUser: {
    parameters: {
      path: {
        /** The id of the User. */
        user_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the deleted Shipping Profile. */
            id?: string;
            /** @description The type of the object that was deleted. */
            object?: string;
            deleted?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a User. */
  GetUsersUser: {
    parameters: {
      path: {
        /** The id of the User. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            user?: components["schemas"]["user"];
          };
        };
      };
    };
  };
  /** Sets the password for a User given the correct token. */
  PostUsersUserPassword: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            user?: components["schemas"]["user"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Users email. */
          email: string;
          /** @description The token generated from the 'password-token' endpoint. */
          token: string;
          /** @description The Users new password. */
          password: string;
        };
      };
    };
  };
}

export interface external {}
