/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth": {
    /** Gets the currently logged in Customer. */
    get: operations["GetAuth"];
    /** Logs a Customer in and authorizes them to view their details. Successful authentication will set a session cookie in the Customer's browser. */
    post: operations["PostAuth"];
    /** Destroys a Customer's authenticated session. */
    delete: operations["DeleteAuth"];
  };
  "/auth/{email}": {
    /** Checks if a Customer with the given email has signed up. */
    get: operations["GetAuthEmail"];
  };
  "/collections/{id}": {
    /** Retrieves a Product Collection. */
    get: operations["GetCollectionsCollection"];
  };
  "/collections": {
    /** Retrieve a list of Product Collection. */
    get: operations["GetCollections"];
  };
  "/customers/me/addresses": {
    /** Adds a Shipping Address to a Customer's saved addresses. */
    post: operations["PostCustomersCustomerAddresses"];
  };
  "/customers": {
    /** Creates a Customer account. */
    post: operations["PostCustomers"];
  };
  "/customers/me/addresses/{address_id}": {
    /** Updates a Customer's saved Shipping Address. */
    post: operations["PostCustomersCustomerAddressesAddress"];
    /** Removes an Address from the Customer's saved addresse. */
    delete: operations["DeleteCustomersCustomerAddressesAddress"];
  };
  "/customers/me": {
    /** Retrieves a Customer - the Customer must be logged in to retrieve their details. */
    get: operations["GetCustomersCustomer"];
    /** Updates a Customer's saved details. */
    post: operations["PostCustomersCustomer"];
  };
  "/customers/me/payment-methods": {
    /** Retrieves a list of a Customer's saved payment methods. Payment methods are saved with Payment Providers and it is their responsibility to fetch saved methods. */
    get: operations["GetCustomersCustomerPaymentMethods"];
  };
  "/customers/me/orders": {
    /** Retrieves a list of a Customer's Orders. */
    get: operations["GetCustomersCustomerOrders"];
  };
  "/customers/password-token": {
    /** Creates a reset password token to be used in a subsequent /reset-password request. The password token should be sent out of band e.g. via email and will not be returned. */
    post: operations["PostCustomersCustomerPasswordToken"];
  };
  "/customers/reset-password": {
    /** Resets a Customer's password using a password token created by a previous /password-token request. */
    post: operations["PostCustomersResetPassword"];
  };
  "/gift-cards/{code}": {
    /** Retrieves a Gift Card by its associated unqiue code. */
    get: operations["GetGiftCardsCode"];
  };
  "/carts/{id}/shipping-methods": {
    /** Adds a Shipping Method to the Cart. */
    post: operations["PostCartsCartShippingMethod"];
  };
  "/carts/{id}/taxes": {
    /** Calculates taxes for a cart. Depending on the cart's region this may involve making 3rd party API calls to a Tax Provider service. */
    post: operations["PostCartsCartTaxes"];
  };
  "/carts/{id}/complete": {
    /** Completes a cart. The following steps will be performed. Payment authorization is attempted and if more work is required, we simply return the cart for further updates. If payment is authorized and order is not yet created, we make sure to do so. The completion of a cart can be performed idempotently with a provided header `Idempotency-Key`. If not provided, we will generate one for the request. */
    post: operations["PostCartsCartComplete"];
  };
  "/carts": {
    /** Creates a Cart within the given region and with the initial items. If no `region_id` is provided the cart will be associated with the first Region available. If no items are provided the cart will be empty after creation. If a user is logged in the cart's customer id and email will be set. */
    post: operations["PostCart"];
  };
  "/carts/{id}/line-items": {
    /** Generates a Line Item with a given Product Variant and adds it to the Cart */
    post: operations["PostCartsCartLineItems"];
  };
  "/carts/{id}/payment-sessions": {
    /** Creates Payment Sessions for each of the available Payment Providers in the Cart's Region. */
    post: operations["PostCartsCartPaymentSessions"];
  };
  "/carts/{id}/discounts/{code}": {
    /** Removes a Discount from a Cart. */
    delete: operations["DeleteCartsCartDiscountsDiscount"];
  };
  "/carts/{id}/line-items/{line_id}": {
    /** Updates a Line Item if the desired quantity can be fulfilled. */
    post: operations["PostCartsCartLineItemsItem"];
    /** Removes a Line Item from a Cart. */
    delete: operations["DeleteCartsCartLineItemsItem"];
  };
  "/carts/{id}/payment-sessions/{provider_id}": {
    /** Updates a Payment Session with additional data. */
    post: operations["PostCartsCartPaymentSessionUpdate"];
    /** Deletes a Payment Session on a Cart. May be useful if a payment has failed. */
    delete: operations["DeleteCartsCartPaymentSessionsSession"];
  };
  "/carts/{id}": {
    /** Retrieves a Cart. */
    get: operations["GetCartsCart"];
  };
  "/carts/{id}/payment-sessions/{provider_id}/refresh": {
    /** Refreshes a Payment Session to ensure that it is in sync with the Cart - this is usually not necessary. */
    post: operations["PostCartsCartPaymentSessionsSession"];
  };
  "/carts/{id}/payment-session": {
    /** Selects a Payment Session as the session intended to be used towards the completion of the Cart. */
    post: operations["PostCartsCartPaymentSession"];
  };
  "/store/carts/{id}": {
    /** Updates a Cart. */
    post: operations["PostCartsCartPaymentMethodUpdate"];
  };
  "/orders/cart/{cart_id}": {
    /** Retrieves an Order by the id of the Cart that was used to create the Order. */
    get: operations["GetOrdersOrderCartId"];
  };
  "/orders/{id}": {
    /** Retrieves an Order */
    get: operations["GetOrdersOrder"];
  };
  "/orders": {
    /** Looks for an Order with a given `display_id`, `email` pair. The `display_id`, `email` pair must match in order for the Order to be returned. */
    get: operations["GetOrders"];
  };
  "/products/{id}": {
    /** Retrieves a Product. */
    get: operations["GetProductsProduct"];
  };
  "/products": {
    /** Retrieves a list of Products. */
    get: operations["GetProducts"];
  };
  "/regions/{id}": {
    /** Retrieves a Region. */
    get: operations["GetRegionsRegion"];
  };
  "/regions": {
    /** Retrieves a list of Regions. */
    get: operations["GetRegions"];
  };
  "/return-reasons/{id}": {
    /** Retrieves a Return Reason. */
    get: operations["GetReturnReasonsReason"];
  };
  "/return-reasons": {
    /** Retrieves a list of Return Reasons. */
    get: operations["GetReturnReasons"];
  };
  "/returns": {
    /** Creates a Return for an Order. */
    post: operations["PostReturns"];
  };
  "/shipping-options": {
    /** Retrieves a list of Shipping Options. */
    get: operations["GetShippingOptions"];
  };
  "/shipping-options/{cart_id}": {
    /** Retrieves a list of Shipping Options available to a cart. */
    get: operations["GetShippingOptionsCartId"];
  };
  "/swaps": {
    /** Creates a Swap on an Order by providing some items to return along with some items to send back */
    post: operations["PostSwaps"];
  };
  "/swaps/{cart_id}": {
    /** Retrieves a Swap by the id of the Cart used to confirm the Swap. */
    get: operations["GetSwapsSwapCartId"];
  };
  "/variants/{variant_id}": {
    /** Retrieves a Product Variant by id */
    get: operations["GetVariantsVariant"];
  };
  "/variants": {
    /** Retrieves a list of Product Variants */
    get: operations["GetVariants"];
  };
}

export interface components {
  schemas: {
    /**
     * Address
     * @description An address.
     */
    address: {
      id?: string;
      customer_id?: string;
      company?: string;
      first_name?: string;
      last_name?: string;
      address_1?: string;
      address_2?: string;
      city?: string;
      country_code?: string;
      country?: components["schemas"]["country"];
    };
    /**
     * Cart
     * @description Represents a user cart
     */
    cart: {
      id?: string;
      email?: string;
      billing_address_id?: string;
      billing_address?: components["schemas"]["address"];
      shipping_address_id?: string;
      shipping_address?: components["schemas"]["address"];
      items?: components["schemas"]["line_item"][];
      region_id?: string;
      region?: components["schemas"]["region"];
      discounts?: components["schemas"]["region"][];
      gift_cards?: components["schemas"]["gift_card"][];
      customer_id?: string;
      customer?: components["schemas"]["customer"];
      payment_session?: components["schemas"]["payment_session"];
      payment_sessions?: components["schemas"]["payment_session"][];
      payment?: components["schemas"]["payment"];
      shipping_methods?: components["schemas"]["shipping_method"][];
      /** @enum {string} */
      type?: "default" | "swap" | "payment_link";
      /** Format: date-time */
      completed_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
      shipping_total?: number;
      discount_total?: number;
      tax_total?: number;
      subtotal?: number;
      refundable_amount?: number;
      gift_card_total?: number;
    };
    /**
     * Claim Image
     * @description Represents photo documentation of a claim.
     */
    claim_image: {
      id?: string;
      claim_item_id?: string;
      url?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Claim Item
     * @description Represents a claimed item along with information about the reasons for the claim.
     */
    claim_item: {
      id?: string;
      images?: components["schemas"]["claim_image"][];
      claim_order_id?: string;
      item_id?: string;
      /** @description The Line Item that the claim refers to */
      item?: components["schemas"]["line_item"];
      variant_id?: string;
      /** @description The Product Variant that is claimed. */
      variant?: components["schemas"]["product_variant"];
      /**
       * @description The reason for the claim
       * @enum {string}
       */
      reason?: "missing_item" | "wrong_item" | "production_failure" | "other";
      /** @description An optional note about the claim, for additional information */
      note?: string;
      /** @description The quantity of the item that is being claimed; must be less than or equal to the amount purchased in the original order. */
      quantity?: number;
      /** @description User defined tags for easy filtering and grouping. */
      tags?: components["schemas"]["claim_tag"][];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Claim Order
     * @description Claim Orders represent a group of faulty or missing items. Each claim order consists of a subset of items associated with an original order, and can contain additional information about fulfillments and returns.
     */
    claim_order: {
      id?: string;
      /** @enum {string} */
      type?: "refund" | "replace";
      /** @enum {string} */
      payment_status?: "na" | "not_refunded" | "refunded";
      /** @enum {string} */
      fulfillment_status?:
        | "not_fulfilled"
        | "partially_fulfilled"
        | "fulfilled"
        | "partially_shipped"
        | "shipped"
        | "partially_returned"
        | "returned"
        | "canceled"
        | "requires_action";
      /** @description The items that have been claimed */
      claim_items?: components["schemas"]["claim_item"][];
      /** @description Refers to the new items to be shipped when the claim order has the type `replace` */
      additional_items?: components["schemas"]["line_item"][];
      /** @description The id of the order that the claim comes from. */
      order_id?: string;
      /** @description Holds information about the return if the claim is to be returned */
      return_order?: components["schemas"]["return"];
      /** @description The id of the address that the new items should be shipped to */
      shipping_address_id?: string;
      /** @description The address that the new items should be shipped to */
      shipping_address?: components["schemas"]["address"];
      /** @description The shipping methods that the claim order will be shipped with. */
      shipping_methods?: components["schemas"]["shipping_method"][];
      /** @description The fulfillments of the new items to be shipped */
      fulfillments?: components["schemas"]["fulfillment"][];
      /** @description The amount that will be refunded in conjunction with the claim */
      refund_amount?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the Swap was canceled.
       */
      canceled_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      /** @description Flag for describing whether or not notifications related to this should be send. */
      no_notification?: boolean;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Claim Tag
     * @description Claim Tags are user defined tags that can be assigned to claim items for easy filtering and grouping.
     */
    claim_tag: {
      /** @description The id of the claim tag. Will be prefixed by `ctag_`. */
      id?: string;
      /** @description The value that the claim tag holds */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      update_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Country
     * @description Country details
     */
    country: {
      /** @description The database id of the country */
      id?: number;
      /** @description The 2 character ISO code for the country. */
      iso_2?: string;
      /** @description The 3 character ISO code for the country. */
      iso_3?: string;
      /** @description The numerical ISO code for the country. */
      num_code?: string;
      /** @description The normalized country name; in upper case. */
      name?: string;
      /** @description The country name appropriate for display. */
      display_name?: string;
    };
    /**
     * Currency
     * @description Currency
     */
    currency: {
      /** @description The 3 character ISO code for the currency. */
      code?: string;
      /** @description The symbol used to indicate the currency. */
      symbol?: string;
      /** @description The native symbol used to indicate the currency. */
      symbol_native?: string;
      /** @description The written name of the currency */
      name?: string;
    };
    /**
     * Custom Shipping Option
     * @description Custom Shipping Options are 'overriden' Shipping Options. Store managers can attach a Custom Shipping Option to a cart in order to set a custom price for a particular Shipping Option
     */
    custom_shipping_option: {
      /** @description The id of the Custom Shipping Option. This value will be prefixed with `cso_`. */
      id?: string;
      /** @description The custom price set that will override the shipping option's original price */
      price?: number;
      /** @description The id of the Shipping Option that the custom shipping option overrides */
      shipping_option_id?: Partial<components["schemas"]["shipping_option"]>;
      /** @description The id of the Cart that the custom shipping option is attached to */
      cart_id?: Partial<components["schemas"]["cart"]>;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Customer Group
     * @description Represents a customer group
     */
    customer_group: {
      id?: string;
      name?: string;
      customers?: { [key: string]: unknown }[];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Customer
     * @description Represents a customer
     */
    customer: {
      id?: string;
      email?: string;
      billing_address_id?: string;
      /** @description The Customer's billing address. */
      billing_address?: Partial<components["schemas"]["address"]>;
      shipping_addresses?: components["schemas"]["address"][];
      first_name?: string;
      last_name?: string;
      phone?: string;
      has_account?: boolean;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Discount Rule
     * @description Holds the rules that governs how a Discount is calculated when applied to a Cart.
     */
    discount_rule: {
      /** @description The id of the Discount Rule. Will be prefixed by `dru_`. */
      id?: string;
      /**
       * @description The type of the Discount, can be `fixed` for discounts that reduce the price by a fixed amount, `percentage` for percentage reductions or `free_shipping` for shipping vouchers.
       * @enum {string}
       */
      type?: "fixed" | "percentage" | "free_shipping";
      /** @description A short description of the discount */
      description?: string;
      /** @description The value that the discount represents; this will depend on the type of the discount */
      value?: number;
      /**
       * @description The scope that the discount should apply to.
       * @enum {string}
       */
      allocation?: "total" | "item";
      /** @description A set of Products that the discount can be used for. */
      valid_for?: components["schemas"]["product"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      update_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Discount
     * @description Represents a discount that can be applied to a cart for promotional purposes.
     */
    discount: {
      /** @description The id of the Discount. Will be prefixed by `disc_`. */
      id?: string;
      /** @description A unique code for the discount - this will be used by the customer to apply the discount */
      code?: string;
      /** @description A flag to indicate if multiple instances of the discount can be generated. I.e. for newsletter discounts */
      is_dynamic?: boolean;
      /** @description The Discount Rule that governs the behaviour of the Discount */
      rule?: Partial<components["schemas"]["discount_rule"]>;
      /** @description Whether the Discount has been disabled. Disabled discounts cannot be applied to carts */
      is_disabled?: boolean;
      /** @description The Discount that the discount was created from. This will always be a dynamic discount */
      parent_discount_id?: string;
      /**
       * Format: date-time
       * @description The time at which the discount can be used.
       */
      starts_at?: string;
      /**
       * Format: date-time
       * @description The time at which the discount can no longer be used.
       */
      ends_at?: string;
      /** @description The Regions in which the Discount can be used */
      regions?: components["schemas"]["region"][];
      /** @description The maximum number of times that a discount can be used. */
      usage_limit?: number;
      /** @description The number of times a discount has been used. */
      usage_count?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * DraftOrder
     * @description Represents a draft order
     */
    "draft-order": {
      id?: string;
      /** @enum {string} */
      status?: "open" | "completed";
      display_id?: string;
      cart_id?: string;
      cart?: Partial<components["schemas"]["cart"]>;
      order_id?: string;
      order?: Partial<components["schemas"]["order"]>;
      /** Format: date-time */
      canceled_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      update_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      /** Format: date-time */
      completed_at?: string;
      no_notification_order?: boolean;
      metadata?: { [key: string]: unknown };
      idempotency_key?: string;
    };
    /**
     * Fulfillment Item
     * @description Correlates a Line Item with a Fulfillment, keeping track of the quantity of the Line Item.
     */
    fulfillment_item: {
      /** @description The id of the Fulfillment that the Fulfillment Item belongs to. */
      fulfillment_id?: string;
      /** @description The id of the Line Item that the Fulfillment Item references. */
      item_id?: string;
      /** @description The Line Item that the Fulfillment Item references. */
      item?: Partial<components["schemas"]["line_item"]>;
      /** @description The quantity of the Line Item that is included in the Fulfillment. */
      quantity?: number;
    };
    /**
     * Fulfillment Provider
     * @description Represents a fulfillment provider plugin and holds its installation status.
     */
    fulfillment_provider: {
      /** @description The id of the fulfillment provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Fulfillment
     * @description Fulfillments are created once store operators can prepare the purchased goods. Fulfillments will eventually be shipped and hold information about how to track shipments. Fulfillments are created through a provider, which is typically an external shipping aggregator, shipping partner og 3PL, most plugins will have asynchronous communications with these providers through webhooks in order to automatically update and synchronize the state of Fulfillments.
     */
    fulfillment: {
      /** @description The id of the Fulfillment. This value will be prefixed by `ful_`. */
      id?: string;
      /** @description The id of the Claim that the Fulfillment belongs to. */
      claim_order_id?: string;
      /** @description The id of the Swap that the Fulfillment belongs to. */
      swap_id?: string;
      /** @description The id of the Order that the Fulfillment belongs to. */
      order_id?: string;
      /** @description The id of the Fulfillment Provider responsible for handling the fulfillment */
      provider_id?: string;
      /** @description The Fulfillment Items in the Fulfillment - these hold information about how many of each Line Item has been fulfilled. */
      items?: components["schemas"]["fulfillment_item"][];
      /** @description The Tracking Links that can be used to track the status of the Fulfillment, these will usually be provided by the Fulfillment Provider. */
      tracking_links?: components["schemas"]["tracking_link"][];
      /**
       * @deprecated
       * @description The tracking numbers that can be used to track the status of the fulfillment.
       */
      tracking_numbers?: string[];
      /**
       * Format: date-time
       * @description The date with timezone at which the Fulfillment was shipped.
       */
      shipped_at?: string;
      /** @description Flag for describing whether or not notifications related to this should be send. */
      no_notification?: boolean;
      /**
       * Format: date-time
       * @description The date with timezone at which the Fulfillment was canceled.
       */
      canceled_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Gift Card Transaction
     * @description Gift Card Transactions are created once a Customer uses a Gift Card to pay for their Order
     */
    gift_card_transaction: {
      /** @description The id of the Gift Card Transaction. This value will be prefixed by `gct_`. */
      id?: string;
      /** @description The id of the Gift Card that was used in the transaction. */
      gift_card_id?: string;
      /** @description The Gift Card that was used in the transaction. */
      gift_card?: Partial<components["schemas"]["gift_card"]>;
      /** @description The id of the Order that the Gift Card was used to pay for. */
      order_id?: string;
      /** @description The amount that was used from the Gift Card. */
      amount?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
    };
    /**
     * Gift Card
     * @description Gift Cards are redeemable and represent a value that can be used towards the payment of an Order.
     */
    gift_card: {
      /** @description The id of the Gift Card. This value will be prefixed by `gift_`. */
      id?: string;
      /** @description The unique code that identifies the Gift Card. This is used by the Customer to redeem the value of the Gift Card. */
      code?: string;
      /** @description The value that the Gift Card represents. */
      value?: number;
      /** @description The remaining value on the Gift Card. */
      balance?: number;
      /** @description The id of the Region in which the Gift Card is available. */
      region_id?: string;
      /** @description The Region in which the Gift Card is available. */
      region?: Partial<components["schemas"]["region"]>;
      /** @description The id of the Order that the Gift Card was purchased in. */
      order_id?: string;
      /** @description Whether the Gift Card has been disabled. Disabled Gift Cards cannot be applied to carts. */
      is_disabled?: boolean;
      /**
       * Format: date-time
       * @description The time at which the Gift Card can no longer be used.
       */
      ends_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Image
     * @description Images holds a reference to a URL at which the image file can be found.
     */
    image: {
      /** @description The id of the Image. This value will be prefixed by `img_`. */
      id?: string;
      /** @description The URL at which the image file can be found. */
      url?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      update_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Invite
     * @description Represents an invite
     */
    invite: {
      id?: string;
      user_email?: string;
      /** @enum {string} */
      role?: "admin" | "member" | "developer";
      accepted?: boolean;
      token?: string;
      /** Format: date-time */
      expores_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
    /**
     * Line Item
     * @description Line Items represent purchasable units that can be added to a Cart for checkout. When Line Items are purchased they will get copied to the resulting order and can eventually be referenced in Fulfillments and Returns. Line Items may also be created when processing Swaps and Claims.
     */
    line_item: {
      /** @description The id of the Line Item. This value will be prefixed by `item_`. */
      id?: string;
      /** @description The id of the Cart that the Line Item belongs to. */
      cart_id?: string;
      /** @description The id of the Order that the Line Item belongs to. */
      order_id?: string;
      /** @description The id of the Swap that the Line Item belongs to. */
      swap_id?: string;
      /** @description The id of the Claim that the Line Item belongs to. */
      claim_order_id?: string;
      /** @description The title of the Line Item, this should be easily identifiable by the Customer. */
      title?: string;
      /** @description A more detailed description of the contents of the Line Item. */
      description?: string;
      /** @description A URL string to a small image of the contents of the Line Item. */
      thumbnail?: string;
      /** @description Flag to indicate if the Line Item is a Gift Card. */
      is_giftcard?: boolean;
      /** @description Flag to indicate if new Line Items with the same variant should be merged or added as an additional Line Item. */
      should_merge?: boolean;
      /** @description Flag to indicate if the Line Item should be included when doing discount calculations. */
      allow_discounts?: boolean;
      /** @description The price of one unit of the content in the Line Item. This should be in the currency defined by the Cart/Order/Swap/Claim that the Line Item belongs to. */
      unit_price?: boolean;
      /** @description The id of the Product Variant contained in the Line Item. */
      variant_id?: string;
      /** @description The Product Variant contained in the Line Item. */
      variant?: Partial<components["schemas"]["product_variant"]>;
      /** @description The quantity of the content in the Line Item. */
      quantity?: number;
      /** @description The quantity of the Line Item that has been fulfilled. */
      fulfilled_quantity?: number;
      /** @description The quantity of the Line Item that has been returned. */
      returned_quantity?: number;
      /** @description The quantity of the Line Item that has been shipped. */
      shipped_quantity?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
      /** @description The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration. */
      refundable?: number;
    };
    /**
     * Money Amount
     * @description Money Amounts represents an amount that a given Product Variant can be purcased for. Each Money Amount either has a Currency or Region associated with it to indicate the pricing in a given Currency or, for fully region-based pricing, the given price in a specific Region. If region-based pricing is used the amount will be in the currency defined for the Reigon.
     */
    money_amount: {
      /** @description The id of the Money Amount. This value will be prefixed by `ma_`. */
      id?: string;
      /** @description The 3 character currency code that the Money Amount is given in. */
      currency_code?: string;
      /** @description The amount in the smallest currecny unit (e.g. cents 100 cents to charge $1) that the Product Variant will cost. */
      amount?: number;
      /** @description An optional sale amount that the Product Variant will be available for when defined. */
      sale_amount?: number;
      /** @description The id of the Product Variant that the Money Amount belongs to. */
      variant_id?: string;
      /** @description The id of the Region that the Money Amount is defined for. */
      region_id?: string;
      /** @description The Region that the Money Amount is defined for. */
      region?: Partial<components["schemas"]["region"]>;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
    };
    /**
     * Note
     * @description Notes are elements which we can use in association with different resources to allow users to describe additional information in relation to these.
     */
    note: {
      /** @description The id of the Note. This value will be prefixed by `note_`. */
      id?: string;
      /** @description The type of resource that the Note refers to. */
      resource_type?: string;
      /** @description The id of the resource that the Note refers to. */
      resource_id?: string;
      /** @description The contents of the note. */
      value?: string;
      /** @description The author of the note. */
      author?: Partial<components["schemas"]["user"]>;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Notification Provider
     * @description Represents a notification provider plugin and holds its installation status.
     */
    notification_provider: {
      /** @description The id of the notification provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Notification
     * @description Notifications a communications sent via Notification Providers as a reaction to internal events such as `order.placed`. Notifications can be used to show a chronological timeline for communications sent to a Customer regarding an Order, and enables resends.
     */
    notification: {
      /** @description The id of the Notification. This value will be prefixed by `noti_`. */
      id?: string;
      /** @description The name of the event that the notification was sent for. */
      event_name?: string;
      /** @description The type of resource that the Notification refers to. */
      resource_type?: string;
      /** @description The id of the resource that the Notification refers to. */
      resource_id?: string;
      /** @description The id of the Customer that the Notification was sent to. */
      customer_id?: string;
      /** @description The Customer that the Notification was sent to. */
      customer?: Partial<components["schemas"]["customer"]>;
      /** @description The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id */
      to?: string;
      /** @description The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend. */
      data?: { [key: string]: unknown };
      /** @description The id of the Notification that was originally sent. */
      parent_id?: string;
      /** @description The resends that have been completed after the original Notification. */
      resends?: components["schemas"]["notification_resend"][];
      /** @description The id of the Notification Provider that handles the Notification. */
      provider_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
    };
    /**
     * Notification Resend
     * @description A resend of a Notification.
     */
    notification_resend: {
      /** @description The id of the Notification. This value will be prefixed by `noti_`. */
      id?: string;
      /** @description The name of the event that the notification was sent for. */
      event_name?: string;
      /** @description The type of resource that the Notification refers to. */
      resource_type?: string;
      /** @description The id of the resource that the Notification refers to. */
      resource_id?: string;
      /** @description The address that the Notification was sent to. This will usually be an email address, but represent other addresses such as a chat bot user id */
      to?: string;
      /** @description The data that the Notification was sent with. This contains all the data necessary for the Notification Provider to initiate a resend. */
      data?: { [key: string]: unknown };
      /** @description The id of the Notification that was originally sent. */
      parent_id?: string;
      /** @description The id of the Notification Provider that handles the Notification. */
      provider_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
    };
    /**
     * OAuth
     * @description Represent an OAuth app
     */
    OAuth: {
      id?: string;
      display_name?: string;
      application_name?: string;
      install_url?: string;
      uninstall_url?: number;
      data?: { [key: string]: unknown };
    };
    /**
     * Order
     * @description Represents an order
     */
    order: {
      id?: string;
      /** @enum {string} */
      status?:
        | "pending"
        | "completed"
        | "archived"
        | "canceled"
        | "requires_action";
      /** @enum {string} */
      fulfillment_status?:
        | "not_fulfilled"
        | "partially_fulfilled"
        | "fulfilled"
        | "partially_shipped"
        | "shipped"
        | "partially_returned"
        | "returned"
        | "canceled"
        | "requires_action";
      /** @enum {string} */
      payment_status?:
        | "not_paid"
        | "awaiting"
        | "captured"
        | "partially_refunded"
        | "refuneded"
        | "canceled"
        | "requires_action";
      display_id?: number;
      cart_id?: string;
      currency_code?: string;
      tax_rate?: number;
      discounts?: components["schemas"]["discount"][];
      email?: string;
      billing_address_id?: string;
      billing_address?: Partial<components["schemas"]["address"]>;
      shipping_address_id?: string;
      shipping_address?: Partial<components["schemas"]["address"]>;
      items?: components["schemas"]["line_item"][];
      region_id?: string;
      region?: Partial<components["schemas"]["region"]>;
      gift_cards?: components["schemas"]["gift_card"][];
      customer_id?: string;
      customer?: Partial<components["schemas"]["customer"]>;
      payment_session?: Partial<components["schemas"]["payment_session"]>;
      payment_sessions?: components["schemas"]["payment_session"][];
      payments?: components["schemas"]["payment"][];
      shipping_methods?: components["schemas"]["shipping_method"][];
      fulfillments?: components["schemas"]["fulfillment"][];
      returns?: components["schemas"]["return"][];
      claims?: components["schemas"]["claim_order"][];
      refunds?: components["schemas"]["refund"][];
      swaps?: components["schemas"]["refund"][];
      gift_card_transactions?: components["schemas"]["gift_card_transaction"][];
      /** Format: date-time */
      canceled_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      update_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
      shipping_total?: number;
      discount_total?: number;
      tax_total?: number;
      subtotal?: number;
      refundable_amount?: number;
      gift_card_total?: number;
      paid_total?: number;
      /** @description Flag for describing whether or not notifications related to this should be send. */
      no_notification?: boolean;
    };
    /**
     * Payment Provider
     * @description Represents a Payment Provider plugin and holds its installation status.
     */
    payment_provider: {
      /** @description The id of the payment provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Payment Session
     * @description Payment Sessions are created when a Customer initilizes the checkout flow, and can be used to hold the state of a payment flow. Each Payment Session is controlled by a Payment Provider, who is responsible for the communication with external payment services. Authorized Payment Sessions will eventually get promoted to Payments to indicate that they are authorized for capture/refunds/etc.
     */
    payment_session: {
      /** @description The id of the Payment Session. This value will be prefixed with `ps_`. */
      id?: string;
      /** @description The id of the Cart that the Payment Session is created for. */
      cart_id?: string;
      /** @description The id of the Payment Provider that is responsible for the Payment Session */
      provider_id?: string;
      /** @description A flag to indicate if the Payment Session has been selected as the method that will be used to complete the purchase. */
      is_selected?: boolean;
      /**
       * @description Indicates the status of the Payment Session. Will default to `pending`, and will eventually become `authorized`. Payment Sessions may have the status of `requires_more` to indicate that further actions are to be completed by the Customer.
       * @enum {string}
       */
      status?:
        | "authorized"
        | "pending"
        | "requires_more"
        | "error"
        | "canceled";
      /** @description The data required for the Payment Provider to identify, modify and process the Payment Session. Typically this will be an object that holds an id to the external payment session, but can be an empty object if the Payment Provider doesn't hold any state. */
      data?: { [key: string]: unknown };
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
    };
    /**
     * Payment
     * @description Payments represent an amount authorized with a given payment method, Payments can be captured, canceled or refunded.
     */
    payment: {
      /** @description The id of the Payment. This value will be prefixed with `pay_`. */
      id?: string;
      /** @description The id of the Swap that the Payment is used for. */
      swap_id?: string;
      /** @description The id of the Order that the Payment is used for. */
      order_id?: string;
      /** @description The id of the Cart that the Payment Session is created for. */
      cart_id?: string;
      /** @description The amount that the Payment has been authorized for. */
      amount?: number;
      /** @description The 3 character ISO currency code that the Payment is completed in. */
      currency_code?: string;
      /** @description The amount of the original Payment amount that has been refunded back to the Customer. */
      amount_refunded?: number;
      /** @description The id of the Payment Provider that is responsible for the Payment */
      provider_id?: string;
      /** @description The data required for the Payment Provider to identify, modify and process the Payment. Typically this will be an object that holds an id to the external payment session, but can be an empty object if the Payment Provider doesn't hold any state. */
      data?: { [key: string]: unknown };
      /**
       * Format: date-time
       * @description The date with timezone at which the Payment was captured.
       */
      captured_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the Payment was canceled.
       */
      canceled_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Collection
     * @description Product Collections represents a group of Products that are related.
     */
    product_collection: {
      /** @description The id of the Product Collection. This value will be prefixed with `pcol_`. */
      id?: string;
      /** @description The title that the Product Collection is identified by. */
      title?: string;
      /** @description A unique string that identifies the Product Collection - can for example be used in slug structures. */
      handle?: string;
      /** @description The Products contained in the Product Collection. */
      products?: { [key: string]: unknown }[];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Option Value
     * @description A value given to a Product Variant's option set. Product Variant have a Product Option Value for each of the Product Options defined on the Product.
     */
    product_option_value: {
      /** @description The id of the Product Option Value. This value will be prefixed with `optval_`. */
      id?: string;
      /** @description The value that the Product Variant has defined for the specific Product Option (e.g. if the Product Option is "Size" this value could be "Small", "Medium" or "Large"). */
      value?: string;
      /** @description The id of the Product Option that the Product Option Value is defined for. */
      option_id?: string;
      /** @description The id of the Product Variant that the Product Option Value is defined for. */
      variant_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Option
     * @description Product Options define properties that may vary between different variants of a Product. Common Product Options are "Size" and "Color", but Medusa doesn't limit what Product Options that can be defined.
     */
    product_option: {
      /** @description The id of the Product Option. This value will be prefixed with `opt_`. */
      id?: string;
      /** @description The title that the Product Option is defined by (e.g. "Size"). */
      title?: string;
      /** @description The Product Option Values that are defined for the Product Option. */
      values?: components["schemas"]["product_option_value"][];
      /** @description The id of the Product that the Product Option is defined for. */
      product_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Tag
     * @description Product Tags can be added to Products for easy filtering and grouping.
     */
    product_tag: {
      /** @description The id of the Product Tag. This value will be prefixed with `ptag_`. */
      id?: string;
      /** @description The value that the Product Tag represents (e.g. "Pants"). */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Tax Rate
     * @description Associates a tax rate with a product to indicate that the product is taxed in a certain way
     */
    product_tax_rate: {
      /** @description The id of the Product */
      product_id?: string;
      /** @description The id of the Tax Rate */
      rate_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Type Tax Rate
     * @description Associates a tax rate with a product type to indicate that the product type is taxed in a certain way
     */
    product_type_tax_rate: {
      /** @description The id of the Product type */
      product_type_id?: string;
      /** @description The id of the Tax Rate */
      rate_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Type
     * @description Product Type can be added to Products for filtering and reporting purposes.
     */
    product_type: {
      /** @description The id of the Product Type. This value will be prefixed with `ptyp_`. */
      id?: string;
      /** @description The value that the Product Type represents (e.g. "Clothing"). */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product Variant
     * @description Product Variants represent a Product with a specific set of Product Option configurations. The maximum number of Product Variants that a Product can have is given by the number of available Product Option combinations.
     */
    product_variant: {
      /** @description The id of the Product Variant. This value will be prefixed with `variant_`. */
      id?: string;
      /** @description A title that can be displayed for easy identification of the Product Variant. */
      title?: string;
      /** @description The id of the Product that the Product Variant belongs to. */
      product_id?: string;
      /** @description The Money Amounts defined for the Product Variant. Each Money Amount represents a price in a given currency or a price in a specific Region. */
      prices?: components["schemas"]["money_amount"][];
      /** @description The unique stock keeping unit used to identify the Product Variant. This will usually be a unqiue identifer for the item that is to be shipped, and can be referenced across multiple systems. */
      sku?: string;
      /** @description A generic field for a GTIN number that can be used to identify the Product Variant. */
      barcode?: string;
      /** @description An EAN barcode number that can be used to identify the Product Variant. */
      ean?: string;
      /** @description A UPC barcode number that can be used to identify the Product Variant. */
      upc?: string;
      /** @description The current quantity of the item that is stocked. */
      inventory_quantity?: number;
      /** @description Whether the Product Variant should be purchasable when `inventory_quantity` is 0. */
      allow_backorder?: boolean;
      /** @description Whether Medusa should manage inventory for the Product Variant. */
      manage_inventory?: boolean;
      /** @description The Harmonized System code of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      hs_code?: string;
      /** @description The country in which the Product Variant was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      origin_country?: string;
      /** @description The Manufacturers Identification code that identifies the manufacturer of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      mid_code?: string;
      /** @description The material and composition that the Product Variant is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      material?: string;
      /** @description The weight of the Product Variant. May be used in shipping rate calculations. */
      weight?: string;
      /** @description The height of the Product Variant. May be used in shipping rate calculations. */
      height?: string;
      /** @description The width of the Product Variant. May be used in shipping rate calculations. */
      width?: string;
      /** @description The length of the Product Variant. May be used in shipping rate calculations. */
      length?: string;
      /** @description The Product Option Values specified for the Product Variant. */
      options?: components["schemas"]["product_option_value"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Product
     * @description Products are a grouping of Product Variants that have common properties such as images and descriptions. Products can have multiple options which define the properties that Product Variants differ by.
     */
    product: {
      /** @description The id of the Product. This value will be prefixed with `prod_`. */
      id?: string;
      /** @description A title that can be displayed for easy identification of the Product. */
      title?: string;
      /** @description An optional subtitle that can be used to further specify the Product. */
      subtitle?: string;
      /** @description A short description of the Product. */
      description?: string;
      /** @description A unique identifier for the Product (e.g. for slug structure). */
      handle?: string;
      /** @description Whether the Product represents a Gift Card. Products that represent Gift Cards will automatically generate a redeemable Gift Card code once they are purchased. */
      is_giftcard?: boolean;
      /** @description Whether the Product can be discounted. Discounts will not apply to Line Items of this Product when this flag is set to `false`. */
      discountable?: boolean;
      /** @description Images of the Product */
      images?: components["schemas"]["image"][];
      /** @description A URL to an image file that can be used to identify the Product. */
      thumbnail?: string;
      /** @description The Product Options that are defined for the Product. Product Variants of the Product will have a unique combination of Product Option Values. */
      options?: components["schemas"]["product_option"][];
      /** @description The Product Variants that belong to the Product. Each will have a unique combination of Product Option Values. */
      variants?: components["schemas"]["product_variant"][];
      /** @description The id of the Shipping Profile that the Product belongs to. Shipping Profiles have a set of defined Shipping Options that can be used to Fulfill a given set of Products. */
      profile_id?: string;
      /** @description The Harmonized System code of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      hs_code?: string;
      /** @description The country in which the Product Variant was produced. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      origin_country?: string;
      /** @description The Manufacturers Identification code that identifies the manufacturer of the Product Variant. May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      mid_code?: string;
      /** @description The material and composition that the Product Variant is made of, May be used by Fulfillment Providers to pass customs information to shipping carriers. */
      material?: string;
      /** @description The weight of the Product Variant. May be used in shipping rate calculations. */
      weight?: string;
      /** @description The height of the Product Variant. May be used in shipping rate calculations. */
      height?: string;
      /** @description The width of the Product Variant. May be used in shipping rate calculations. */
      width?: string;
      /** @description The length of the Product Variant. May be used in shipping rate calculations. */
      length?: string;
      /** @description The Product Type of the Product (e.g. "Clothing") */
      type?: Partial<components["schemas"]["product_type"]>;
      /** @description The Product Collection that the Product belongs to (e.g. "SS20") */
      collection?: Partial<components["schemas"]["product_collection"]>;
      /** @description The Product Tags assigned to the Product. */
      tags?: components["schemas"]["product_tag"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Refund
     * @description Refund represent an amount of money transfered back to the Customer for a given reason. Refunds may occur in relation to Returns, Swaps and Claims, but can also be initiated by a store operator.
     */
    refund: {
      /** @description The id of the Refund. This value will be prefixed with `ref_`. */
      id?: string;
      /** @description The id of the Order that the Refund is related to. */
      order_id?: string;
      /** @description The amount that has be refunded to the Customer. */
      amount?: number;
      /** @description An optional note explaining why the amount was refunded. */
      note?: string;
      /**
       * @description The reason given for the Refund, will automatically be set when processed as part of a Swap, Claim or Return.
       * @enum {string}
       */
      reason?: "discount" | "return" | "swap" | "claim" | "other";
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Region
     * @description Regions hold settings for how Customers in a given geographical location shop. The is, for example, where currencies and tax rates are defined. A Region can consist of multiple countries to accomodate common shopping settings across countries.
     */
    region: {
      /** @description The id of the Region. This value will be prefixed with `reg_`. */
      id?: string;
      /** @description The name of the region as displayed to the customer. If the Region only has one country it is recommended to write the country name. */
      name?: string;
      /** @description The 3 character ISO currency code that Customers will shop in in the Region. */
      currency_code?: string;
      /** @description The tax rate that should be charged on purchases in the Region. */
      tax_rate?: number;
      /** @description The tax code used on purchases in the Region. This may be used by other systems for accounting purposes. */
      tax_code?: string;
      /** @description The countries that are included in the Region. */
      countries?: components["schemas"]["country"][];
      /** @description The Payment Providers that can be used to process Payments in the Region. */
      payment_providers?: components["schemas"]["payment_provider"][];
      /** @description The Fulfillment Providers that can be used to fulfill orders in the Region. */
      fulfillment_providers?: components["schemas"]["fulfillment_provider"][];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Return Item
     * @description Correlates a Line Item with a Return, keeping track of the quantity of the Line Item that will be returned.
     */
    return_item: {
      /** @description The id of the Return that the Return Item belongs to. */
      return_id?: string;
      /** @description The id of the Line Item that the Return Item references. */
      item_id?: string;
      /** @description The Line Item that the Return Item references. */
      item?: Partial<components["schemas"]["line_item"]>;
      /** @description The quantity of the Line Item that is included in the Return. */
      quantity?: number;
      /** @description Whether the Return Item was requested initially or received unexpectedly in the warehouse. */
      is_requested?: boolean;
      /** @description The quantity that was originally requested to be returned. */
      requested_quantity?: number;
      /** @description The quantity that was received in the warehouse. */
      recieved_quantity?: number;
      /** @description The reason for returning the item. */
      reason?: Partial<components["schemas"]["return_reason"]>;
      /** @description An optional note with additional details about the Return. */
      note?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Return Reason
     * @description A Reason for why a given product is returned. A Return Reason can be used on Return Items in order to indicate why a Line Item was returned.
     */
    return_reason: {
      /** @description The id of the Return Reason will start with `rr_`. */
      id?: string;
      /** @description A description of the Reason. */
      description?: string;
      /** @description A text that can be displayed to the Customer as a reason. */
      label?: string;
      /** @description The value to identify the reason by. */
      value?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Return
     * @description Return orders hold information about Line Items that a Customer wishes to send back, along with how the items will be returned. Returns can be used as part of a Swap.
     */
    return: {
      /** @description The id of the Return. This value will be prefixed with `ret_`. */
      id?: string;
      /**
       * @description Status of the Return.
       * @enum {string}
       */
      status?: "requested" | "received" | "requires_action";
      /** @description The Return Items that will be shipped back to the warehouse. type: array items: $ref: */
      items?: unknown;
      /** @description The id of the Swap that the Return is a part of. */
      swap_id?: string;
      /** @description The id of the Order that the Return is made from. */
      order_id?: string;
      /** @description The id of the Claim that the Return is a part of. */
      claim_order_id?: string;
      /** @description The Shipping Method that will be used to send the Return back. Can be null if the Customer facilitates the return shipment themselves. */
      shipping_method?: Partial<components["schemas"]["shipping_method"]>;
      /** @description Data about the return shipment as provided by the Fulfilment Provider that handles the return shipment. */
      shipping_data?: { [key: string]: unknown };
      /** @description The amount that should be refunded as a result of the return. */
      refund_amount?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the return was received.
       */
      received_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description When set to true, no notification will be sent related to this return. */
      no_notification?: boolean;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Shipping Method
     * @description Shipping Methods represent a way in which an Order or Return can be shipped. Shipping Methods are built from a Shipping Option, but may contain additional details, that can be necessary for the Fulfillment Provider to handle the shipment.
     */
    shipping_method: {
      /** @description The id of the Shipping Method. This value will be prefixed with `sm_`. */
      id?: string;
      /** @description The id of the Shipping Option that the Shipping Method is built from. */
      shipping_option_id?: string;
      /** @description The Shipping Option that the Shipping Method is built from. */
      shipping_option?: Partial<components["schemas"]["shipping_option"]>;
      /** @description The id of the Order that the Shipping Method is used on. */
      order_id?: string;
      /** @description The id of the Return that the Shipping Method is used on. */
      return_id?: string;
      /** @description The id of the Swap that the Shipping Method is used on. */
      swap_id?: string;
      /** @description The id of the Cart that the Shipping Method is used on. */
      cart_id?: string;
      /** @description The id of the Claim that the Shipping Method is used on. */
      claim_order_id?: string;
      /** @description The amount to charge for the Shipping Method. The currency of the price is defined by the Region that the Order that the Shipping Method belongs to is a part of. */
      price?: number;
      /** @description Additional data that the Fulfillment Provider needs to fulfill the shipment. This is used in combination with the Shipping Options data, and may contain information such as a drop point id. */
      data?: { [key: string]: unknown };
    };
    /**
     * Shipping Option Requirement
     * @description A requirement that a Cart must satisfy for the Shipping Option to be available to the Cart.
     */
    shipping_option_requirement: {
      /** @description The id of the Shipping Option Requirement. This value will be prefixed with `sor_`. */
      id?: string;
      /** @description The id of the Shipping Option that the Shipping Option Requirement belongs to. */
      shipping_option_id?: string;
      /**
       * @description The type of the requirement, this defines how the value will be compared to the Cart's total. `min_subtotal` requirements define the minimum subtotal that is needed for the Shipping Option to be available, while the `max_subtotal` defines the maximum subtotal that the Cart can have for the Shipping Option to be available.
       * @enum {string}
       */
      type?: "min_subtotal" | "max_subtotal";
      /** @description The amount to compare the Cart subtotal to. */
      amount?: number;
    };
    /**
     * Shipping Option
     * @description Shipping Options represent a way in which an Order or Return can be shipped. Shipping Options have an associated Fulfillment Provider that will be used when the fulfillment of an Order is initiated. Shipping Options themselves cannot be added to Carts, but serve as a template for Shipping Methods. This distinction makes it possible to customize individual Shipping Methods with additional information.
     */
    shipping_option: {
      /** @description The id of the Shipping Option. This value will be prefixed with `so_`. */
      id?: string;
      /** @description The name given to the Shipping Option - this may be displayed to the Customer. */
      name?: string;
      /** @description The id of the Region that the Shipping Option belongs to. */
      region_id?: string;
      /** @description The id of the Region that the Shipping Option belongs to. */
      region?: Partial<components["schemas"]["region"]>;
      /** @description The id of the Shipping Profile that the Shipping Option belongs to. Shipping Profiles have a set of defined Shipping Options that can be used to Fulfill a given set of Products. */
      profile_id?: string;
      /** @description The id of the Fulfillment Provider, that will be used to process Fulfillments from the Shipping Option. */
      provider_id?: string;
      /**
       * @description The type of pricing calculation that is used when creatin Shipping Methods from the Shipping Option. Can be `flat_rate` for fixed prices or `calculated` if the Fulfillment Provider can provide price calulations.
       * @enum {string}
       */
      price_type?: "flat_rate" | "calculated";
      /** @description The amount to charge for shipping when the Shipping Option price type is `flat_rate`. */
      amount?: number;
      /** @description Flag to indicate if the Shipping Option can be used for Return shipments. */
      is_return?: boolean;
      /** @description The requirements that must be satisfied for the Shipping Option to be available for a Cart. */
      requirements?: components["schemas"]["shipping_option_requirement"][];
      /** @description The data needed for the Fulfillment Provider to identify the Shipping Option. */
      data?: { [key: string]: unknown };
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Shipping Profile
     * @description Shipping Profiles have a set of defined Shipping Options that can be used to fulfill a given set of Products.
     */
    shipping_profile: {
      /** @description The id of the Shipping Profile. This value will be prefixed with `sp_`. */
      id?: string;
      /** @description The name given to the Shipping profile - this may be displayed to the Customer. */
      name?: string;
      /**
       * @description The type of the Shipping Profile, may be `default`, `gift_card` or `custom`.
       * @enum {string}
       */
      type?: "default" | "gift_card" | "custom";
      /** @description The Products that the Shipping Profile defines Shipping Options for. */
      products?: components["schemas"]["product"][];
      /** @description The Shipping Options that can be used to fulfill the Products in the Shipping Profile. */
      shipping_options?: Partial<components["schemas"]["shipping_option"]>[];
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Shipping Tax Rate
     * @description Associates a tax rate with a shipping option to indicate that the shipping option is taxed in a certain way
     */
    shipping_tax_rate: {
      /** @description The id of the Shipping Option */
      shipping_option_id?: string;
      /** @description The id of the Tax Rate */
      rate_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Store
     * @description Holds settings for the Store, such as name, currencies, etc.
     */
    store: {
      /** @description The id of the Store. This value will be prefixed with `store_`. */
      id?: string;
      /** @description The name of the Store - this may be displayed to the Customer. */
      name?: string;
      /** @description The default currency code used when no other currency code is specified. */
      default_currency_code?: string;
      /** @description The currencies that are enabled for the Store. */
      currencies?: components["schemas"]["currency"][];
      /** @description A template to generate Swap links from use {{cart_id}} to include the Swap's `cart_id` in the link. */
      swap_link_template?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Swap
     * @description Swaps can be created when a Customer wishes to exchange Products that they have purchased to different Products. Swaps consist of a Return of previously purchased Products and a Fulfillment of new Products, the amount paid for the Products being returned will be used towards payment for the new Products. In the case where the amount paid for the the Products being returned exceed the amount to be paid for the new Products, a Refund will be issued for the difference.
     */
    swap: {
      /** @description The id of the Swap. This value will be prefixed with `swap_`. */
      id?: string;
      /**
       * @description The status of the Fulfillment of the Swap.
       * @enum {string}
       */
      fulfillment_status?:
        | "not_fulfilled"
        | "partially_fulfilled"
        | "fulfilled"
        | "partially_shipped"
        | "shipped"
        | "partially_returned"
        | "returned"
        | "canceled"
        | "requires_action";
      /**
       * @description The status of the Payment of the Swap. The payment may either refer to the refund of an amount or the authorization of a new amount.
       * @enum {string}
       */
      payment_status?:
        | "not_paid"
        | "awaiting"
        | "captured"
        | "canceled"
        | "difference_refunded"
        | "requires_action";
      /** @description The id of the Order where the Line Items to be returned where purchased. */
      order_id?: string;
      /** @description The new Line Items to ship to the Customer. */
      additional_items?: components["schemas"]["line_item"][];
      /** @description The Return that is issued for the return part of the Swap. */
      return_order?: Partial<components["schemas"]["return"]>;
      /** @description The Fulfillments used to send the new Line Items. */
      fulfillments?: components["schemas"]["fulfillment"][];
      /** @description The Payment authorized when the Swap requires an additional amount to be charged from the Customer. */
      payment?: Partial<components["schemas"]["payment"]>;
      /** @description The difference that is paid or refunded as a result of the Swap. May be negative when the amount paid for the returned items exceed the total of the new Products. */
      difference_due?: number;
      /** @description The Address to send the new Line Items to - in most cases this will be the same as the shipping address on the Order. */
      shipping_address?: Partial<components["schemas"]["address"]>;
      /** @description The Shipping Methods used to fulfill the addtional items purchased. */
      shipping_methods?: components["schemas"]["shipping_method"][];
      /** @description The id of the Cart that the Customer will use to confirm the Swap. */
      cart_id?: string;
      /** @description If true, swaps can be completed with items out of stock */
      allow_backorder?: boolean;
      /**
       * Format: date-time
       * @description The date with timezone at which the Swap was confirmed by the Customer.
       */
      confirmed_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the Swap was canceled.
       */
      canceled_at?: string;
      /** @description If set to true, no notification will be sent related to this swap */
      no_notification?: boolean;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Tax Line
     * @description Line item that specifies an amount of tax to add to a line item.
     */
    tax_line: {
      /** @description The id of the Tax Line. This value will be prefixed by `tl_`. */
      id?: string;
      /** @description A code to identify the tax type by */
      code?: string;
      /** @description A human friendly name for the tax */
      name?: string;
      /** @description The numeric rate to charge tax by */
      rate?: number;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * Tax Provider
     * @description The tax service used to calculate taxes
     */
    tax_provider: {
      /** @description The id of the tax provider as given by the plugin. */
      id?: string;
      /** @description Whether the plugin is installed in the current version. Plugins that are no longer installed are not deleted by will have this field set to `false`. */
      is_installed?: boolean;
    };
    /**
     * Tax Rate
     * @description A Tax Rate can be used to associate a certain rate to charge on products within a given Region
     */
    tax_rate: {
      /** @description The id of the Tax Rate. This value will be prefixed by `txr_`. */
      id?: string;
      /** @description The numeric rate to charge */
      rate?: number;
      /** @description A code to identify the tax type by */
      code?: string;
      /** @description A human friendly name for the tax */
      name?: string;
      /** @description The id of the Region that the rate belongs to */
      region_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
      /** @description The amount that can be refunded from the given Line Item. Takes taxes and discounts into consideration. */
      refundable?: number;
    };
    /**
     * Tracking Link
     * @description Tracking Link holds information about tracking numbers for a Fulfillment. Tracking Links can optionally contain a URL that can be visited to see the status of the shipment.
     */
    tracking_link: {
      /** @description The id of the Tracking Link. This value will be prefixed with `tlink_`. */
      id?: string;
      /** @description The URL at which the status of the shipment can be tracked. */
      url?: string;
      /** @description The tracking number given by the shipping carrier. */
      tracking_number?: string;
      /** @description The id of the Fulfillment that the Tracking Link references. */
      fulfillment_id?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date with timezone at which the resource was deleted.
       */
      deleted_at?: string;
      /** @description An optional key-value map with additional information. */
      metadata?: { [key: string]: unknown };
    };
    /**
     * User
     * @description Represents a User who can manage store settings.
     */
    user: {
      /** @description The unique id of the User. This will be prefixed with `usr_` */
      id?: string;
      /** @description The email of the User */
      email?: string;
      first_name?: string;
      /** @description The Customer's billing address. */
      last_name?: Partial<components["schemas"]["address"]>;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** Format: date-time */
      deleted_at?: string;
      metadata?: { [key: string]: unknown };
    };
  };
}

export interface operations {
  /** Gets the currently logged in Customer. */
  GetAuth: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
  };
  /** Logs a Customer in and authorizes them to view their details. Successful authentication will set a session cookie in the Customer's browser. */
  PostAuth: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Customer's email. */
          email: string;
          /** @description The Customer's password. */
          password: string;
        };
      };
    };
  };
  /** Destroys a Customer's authenticated session. */
  DeleteAuth: {
    responses: {
      /** OK */
      200: unknown;
    };
  };
  /** Checks if a Customer with the given email has signed up. */
  GetAuthEmail: {
    parameters: {
      path: {
        /** The Customer's email. */
        email: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            exists?: boolean;
          };
        };
      };
    };
  };
  /** Retrieves a Product Collection. */
  GetCollectionsCollection: {
    parameters: {
      path: {
        /** The id of the Product Collection */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["product_collection"];
          };
        };
      };
    };
  };
  /** Retrieve a list of Product Collection. */
  GetCollections: {
    parameters: {
      query: {
        /** The number of collections to skip before starting to collect the collections set */
        offset?: number;
        /** The number of collections to return */
        limit?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            collection?: components["schemas"]["product_collection"];
          };
        };
      };
    };
  };
  /** Adds a Shipping Address to a Customer's saved addresses. */
  PostCustomersCustomerAddresses: {
    responses: {
      /** A successful response */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Address to add to the Customer. */
          address: Partial<components["schemas"]["address"]>;
        };
      };
    };
  };
  /** Creates a Customer account. */
  PostCustomers: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Customer's email address. */
          email: string;
          /** @description The Customer's first name. */
          first_name: string;
          /** @description The Customer's last name. */
          last_name: string;
          /** @description The Customer's password for login. */
          password: string;
          /** @description The Customer's phone number. */
          phone?: string;
        };
      };
    };
  };
  /** Updates a Customer's saved Shipping Address. */
  PostCustomersCustomerAddressesAddress: {
    parameters: {
      path: {
        /** The id of the Address to update. */
        address_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The updated Address. */
          address?: Partial<components["schemas"]["address"]>;
        };
      };
    };
  };
  /** Removes an Address from the Customer's saved addresse. */
  DeleteCustomersCustomerAddressesAddress: {
    parameters: {
      path: {
        /** The id of the Address to remove. */
        address_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
  };
  /** Retrieves a Customer - the Customer must be logged in to retrieve their details. */
  GetCustomersCustomer: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
  };
  /** Updates a Customer's saved details. */
  PostCustomersCustomer: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Customer's first name. */
          first_name?: string;
          /** @description The Customer's last name. */
          last_name?: string;
          /** @description The Address to be used for billing purposes. */
          billing_address?: Partial<components["schemas"]["address"]>;
          /** @description The Customer's password. */
          password?: string;
          /** @description The Customer's phone number. */
          phone?: string;
          /** @description The email of the customer. */
          email?: string;
          /** @description Metadata about the customer. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves a list of a Customer's saved payment methods. Payment methods are saved with Payment Providers and it is their responsibility to fetch saved methods. */
  GetCustomersCustomerPaymentMethods: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            payment_methods?: {
              /** @description The id of the Payment Provider where the payment method is saved. */
              provider_id?: string;
              /** @description The data needed for the Payment Provider to use the saved payment method. */
              data?: { [key: string]: unknown };
            }[];
          };
        };
      };
    };
  };
  /** Retrieves a list of a Customer's Orders. */
  GetCustomersCustomerOrders: {
    parameters: {
      query: {
        /** How many addresses to return. */
        limit?: number;
        /** The offset in the resulting addresses. */
        offset?: number;
        /** (Comma separated string) Which fields should be included in the resulting addresses. */
        fields?: string;
        /** (Comma separated string) Which relations should be expanded in the resulting addresses. */
        expand?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The total number of Orders. */
            count?: number;
            /** @description The offset for pagination. */
            offset?: number;
            /** @description The maxmimum number of Orders to return, */
            limit?: number;
            orders?: components["schemas"]["order"][];
          };
        };
      };
    };
  };
  /** Creates a reset password token to be used in a subsequent /reset-password request. The password token should be sent out of band e.g. via email and will not be returned. */
  PostCustomersCustomerPasswordToken: {
    parameters: {};
    responses: {
      /** OK */
      204: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Email of the user whose password should be reset. */
          email: string;
        };
      };
    };
  };
  /** Resets a Customer's password using a password token created by a previous /password-token request. */
  PostCustomersResetPassword: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The Customer's email. */
          email: string;
          /** @description The password token created by a /password-token request. */
          token: string;
          /** @description The new password to set for the Customer. */
          password: string;
        };
      };
    };
  };
  /** Retrieves a Gift Card by its associated unqiue code. */
  GetGiftCardsCode: {
    parameters: {
      path: {
        /** The unique Gift Card code. */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The id of the Gift Card */
            id?: unknown;
            /** @description The code of the Gift Card */
            code?: unknown;
            /** @description The original value of the Gift Card. */
            value?: unknown;
            /** @description The current balanace of the Gift Card */
            balance?: unknown;
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Adds a Shipping Method to the Cart. */
  PostCartsCartShippingMethod: {
    parameters: {
      path: {
        /** The cart id. */
        id: string;
      };
    };
    responses: {
      /** A successful response */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description id of the shipping option to create the method from */
          option_id: string;
          /** @description Used to hold any data that the shipping method may need to process the fulfillment of the order. Look at the documentation for your installed fulfillment providers to find out what to send. */
          data?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Calculates taxes for a cart. Depending on the cart's region this may involve making 3rd party API calls to a Tax Provider service. */
  PostCartsCartTaxes: {
    parameters: {
      path: {
        /** The Cart id. */
        id: string;
      };
    };
    responses: {
      /** A cart object with the tax_total field populated */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Completes a cart. The following steps will be performed. Payment authorization is attempted and if more work is required, we simply return the cart for further updates. If payment is authorized and order is not yet created, we make sure to do so. The completion of a cart can be performed idempotently with a provided header `Idempotency-Key`. If not provided, we will generate one for the request. */
  PostCartsCartComplete: {
    parameters: {
      path: {
        /** The Cart id. */
        id: string;
      };
    };
    responses: {
      /** If a cart was successfully authorized, but requires further action from the user the response body will contain the cart with an updated payment session. If the Cart was successfully completed the response body will contain the newly created Order. */
      200: {
        content: {
          "application/json":
            | {
                order?: components["schemas"]["order"];
              }
            | {
                cart?: components["schemas"]["cart"];
              }
            | {
                cart?: components["schemas"]["swap"];
              };
        };
      };
    };
  };
  /** Creates a Cart within the given region and with the initial items. If no `region_id` is provided the cart will be associated with the first Region available. If no items are provided the cart will be empty after creation. If a user is logged in the cart's customer id and email will be set. */
  PostCart: {
    responses: {
      /** Successfully created a new Cart */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Region to create the Cart in. */
          region_id?: string;
          /** @description The 2 character ISO country code to create the Cart in. */
          country_code?: string;
          /** @description An optional array of `variant_id`, `quantity` pairs to generate Line Items from. */
          items?: {
            /** @description The id of the Product Variant to generate a Line Item from. */
            variant_id?: string;
            /** @description The quantity of the Product Variant to add */
            quantity?: number;
          }[];
          /** @description An optional object to provide context to the Cart. The `context` field is automatically populated with `ip` and `user_agent` */
          context?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Generates a Line Item with a given Product Variant and adds it to the Cart */
  PostCartsCartLineItems: {
    parameters: {
      path: {
        /** The id of the Cart to add the Line Item to. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Product Variant to generate the Line Item from. */
          variant_id: string;
          /** @description The quantity of the Product Variant to add to the Line Item. */
          quantity: number;
          /** @description An optional key-value map with additional details about the Line Item. */
          metadata?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Creates Payment Sessions for each of the available Payment Providers in the Cart's Region. */
  PostCartsCartPaymentSessions: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Removes a Discount from a Cart. */
  DeleteCartsCartDiscountsDiscount: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
        /** The unique Discount code. */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Updates a Line Item if the desired quantity can be fulfilled. */
  PostCartsCartLineItemsItem: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
        /** The id of the Line Item. */
        line_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The quantity to set the Line Item to. */
          quantity: number;
        };
      };
    };
  };
  /** Removes a Line Item from a Cart. */
  DeleteCartsCartLineItemsItem: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
        /** The id of the Line Item. */
        line_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Updates a Payment Session with additional data. */
  PostCartsCartPaymentSessionUpdate: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
        /** The id of the payment provider. */
        provider_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The data to update the payment session with. */
          data: { [key: string]: unknown };
        };
      };
    };
  };
  /** Deletes a Payment Session on a Cart. May be useful if a payment has failed. */
  DeleteCartsCartPaymentSessionsSession: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
        /** The id of the Payment Provider used to create the Payment Session to be deleted. */
        provider_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Retrieves a Cart. */
  GetCartsCart: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Refreshes a Payment Session to ensure that it is in sync with the Cart - this is usually not necessary. */
  PostCartsCartPaymentSessionsSession: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
        /** The id of the Payment Provider that created the Payment Session to be refreshed. */
        provider_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
  };
  /** Selects a Payment Session as the session intended to be used towards the completion of the Cart. */
  PostCartsCartPaymentSession: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Payment Provider. */
          provider_id: string;
        };
      };
    };
  };
  /** Updates a Cart. */
  PostCartsCartPaymentMethodUpdate: {
    parameters: {
      path: {
        /** The id of the Cart. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            cart?: components["schemas"]["cart"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Payment Provider. */
          provider_id: string;
          data?: { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrieves an Order by the id of the Cart that was used to create the Order. */
  GetOrdersOrderCartId: {
    parameters: {
      path: {
        /** The id of Cart. */
        cart_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Retrieves an Order */
  GetOrdersOrder: {
    parameters: {
      path: {
        /** The id of the Order. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            customer?: components["schemas"]["customer"];
          };
        };
      };
    };
  };
  /** Looks for an Order with a given `display_id`, `email` pair. The `display_id`, `email` pair must match in order for the Order to be returned. */
  GetOrders: {
    parameters: {
      query: {
        /** The display id given to the Order. */
        display_id: number;
        /** The email of the Order with the given display_id. */
        email: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            order?: components["schemas"]["order"];
          };
        };
      };
    };
  };
  /** Retrieves a Product. */
  GetProductsProduct: {
    parameters: {
      path: {
        /** The id of the Product. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            product?: components["schemas"]["product"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Products. */
  GetProducts: {
    parameters: {
      query: {
        /** Query used for searching products. */
        q?: string;
        /** Id of the product to search for. */
        id?: string;
        /** Collection ids to search for. */
        collection_id?: unknown[];
        /** Tags to search for. */
        tags?: unknown[];
        /** to search for. */
        title?: string;
        /** to search for. */
        description?: string;
        /** to search for. */
        handle?: string;
        /** Search for giftcards using is_giftcard=true. */
        is_giftcard?: string;
        /** to search for. */
        type?: string;
        /** Date comparison for when resulting products was created, i.e. less than, greater than etc. */
        created_at?: { [key: string]: unknown };
        /** Date comparison for when resulting products was updated, i.e. less than, greater than etc. */
        updated_at?: { [key: string]: unknown };
        /** Date comparison for when resulting products was deleted, i.e. less than, greater than etc. */
        deleted_at?: { [key: string]: unknown };
        /** How many products to skip in the result. */
        offset?: string;
        /** Limit the number of products returned. */
        limit?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The total number of Products. */
            count?: number;
            /** @description The offset for pagination. */
            offset?: number;
            /** @description The maxmimum number of Products to return, */
            limit?: number;
            products?: components["schemas"]["product"][];
          };
        };
      };
    };
  };
  /** Retrieves a Region. */
  GetRegionsRegion: {
    parameters: {
      path: {
        /** The id of the Region. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            region?: components["schemas"]["region"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Regions. */
  GetRegions: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description The total number of regions. */
            count?: number;
            /** @description The offset for pagination. */
            offset?: number;
            /** @description The maxmimum number of regions to return, */
            limit?: number;
            regions?: components["schemas"]["region"][];
          };
        };
      };
    };
  };
  /** Retrieves a Return Reason. */
  GetReturnReasonsReason: {
    parameters: {
      path: {
        /** The id of the Return Reason. */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return_reason?: components["schemas"]["return_reason"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Return Reasons. */
  GetReturnReasons: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return_reasons?: components["schemas"]["return_reason"][];
          };
        };
      };
    };
  };
  /** Creates a Return for an Order. */
  PostReturns: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            return?: components["schemas"]["return"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Order to create the Return from. */
          order_id: string;
          /** @description The items to include in the Return. */
          items: {
            /** @description The id of the Line Item from the Order. */
            item_id: string;
            /** @description The quantity to return. */
            quantity: number;
          }[];
          /** @description If the Return is to be handled by the store operator the Customer can choose a Return Shipping Method. Alternatvely the Customer can handle the Return themselves. */
          return_shipping?: {
            /** @description The id of the Shipping Option to create the Shipping Method from. */
            option_id: string;
          };
        };
      };
    };
  };
  /** Retrieves a list of Shipping Options. */
  GetShippingOptions: {
    parameters: {
      query: {
        /** Whether return Shipping Options should be included. By default all Shipping Options are returned. */
        is_return?: boolean;
        /** A comma separated list of Product ids to filter Shipping Options by. */
        product_ids?: string;
        /** the Region to retrieve Shipping Options from. */
        region_id?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_options?: components["schemas"]["shipping_option"][];
          };
        };
      };
    };
  };
  /** Retrieves a list of Shipping Options available to a cart. */
  GetShippingOptionsCartId: {
    parameters: {
      path: {
        /** The id of the Cart. */
        cart_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            shipping_options?: components["schemas"]["shipping_option"][];
          };
        };
      };
    };
  };
  /** Creates a Swap on an Order by providing some items to return along with some items to send back */
  PostSwaps: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            swap?: components["schemas"]["swap"];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The id of the Order to create the Swap for. */
          order_id: string;
          /** @description The items to include in the Return. */
          return_items: {
            /** @description The id of the Line Item from the Order. */
            item_id: string;
            /** @description The quantity to return. */
            quantity: number;
            /** @description The id of the reason of this return */
            reason_id?: string;
            /** @description The id of the note */
            note_id?: string;
          }[];
          /** @description The id of the Shipping Option to create the Shipping Method from. */
          return_shipping_option?: string;
          /** @description The items to exchange the returned items to. */
          additional_items: {
            /** @description The id of the Product Variant to send. */
            variant_id: string;
            /** @description The quantity to send of the variant. */
            quantity: number;
          }[];
        };
      };
    };
  };
  /** Retrieves a Swap by the id of the Cart used to confirm the Swap. */
  GetSwapsSwapCartId: {
    parameters: {
      path: {
        /** The id of the Cart */
        cart_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            swap?: components["schemas"]["swap"];
          };
        };
      };
    };
  };
  /** Retrieves a Product Variant by id */
  GetVariantsVariant: {
    parameters: {
      path: {
        /** The id of the Product Variant. */
        variant_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            variant?: components["schemas"]["product_variant"];
          };
        };
      };
    };
  };
  /** Retrieves a list of Product Variants */
  GetVariants: {
    parameters: {
      query: {
        /** A comma separated list of Product Variant ids to filter by. */
        ids?: string;
        /** A comma separated list of Product Variant relations to load. */
        expand?: string;
        offset?: number;
        /** Maximum number of Product Variants to return. */
        limit?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            variants?: components["schemas"]["product_variant"][];
          };
        };
      };
    };
  };
}

export interface external {}
